// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: api/account-service/v1/services/account.service.v1.proto

package servicev1

import (
	context "context"
	resources "github.com/go-micro-saas/service-api/api/account-service/v1/resources"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SrvAccountV1_Ping_FullMethodName                   = "/saas.api.account.servicev1.SrvAccountV1/Ping"
	SrvAccountV1_GetUserInfo_FullMethodName            = "/saas.api.account.servicev1.SrvAccountV1/GetUserInfo"
	SrvAccountV1_GetUserInfoList_FullMethodName        = "/saas.api.account.servicev1.SrvAccountV1/GetUserInfoList"
	SrvAccountV1_GetUserList_FullMethodName            = "/saas.api.account.servicev1.SrvAccountV1/GetUserList"
	SrvAccountV1_CreateUser_FullMethodName             = "/saas.api.account.servicev1.SrvAccountV1/CreateUser"
	SrvAccountV1_CreateUserByPhone_FullMethodName      = "/saas.api.account.servicev1.SrvAccountV1/CreateUserByPhone"
	SrvAccountV1_CreateUserByEmail_FullMethodName      = "/saas.api.account.servicev1.SrvAccountV1/CreateUserByEmail"
	SrvAccountV1_CreateOrGetUserByPhone_FullMethodName = "/saas.api.account.servicev1.SrvAccountV1/CreateOrGetUserByPhone"
	SrvAccountV1_CreateOrGetUserByEmail_FullMethodName = "/saas.api.account.servicev1.SrvAccountV1/CreateOrGetUserByEmail"
)

// SrvAccountV1Client is the client API for SrvAccountV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SrvAccountV1 account service
type SrvAccountV1Client interface {
	// 账户-Ping测试
	Ping(ctx context.Context, in *resources.PingReq, opts ...grpc.CallOption) (*resources.PingResp, error)
	// 账户-获取用户信息
	GetUserInfo(ctx context.Context, in *resources.GetUserInfoReq, opts ...grpc.CallOption) (*resources.GetUserInfoResp, error)
	// 账户-获取用户信息列表
	GetUserInfoList(ctx context.Context, in *resources.GetUserInfoListReq, opts ...grpc.CallOption) (*resources.GetUserInfoListResp, error)
	// 账户-获取用户列表
	GetUserList(ctx context.Context, in *resources.UserListReq, opts ...grpc.CallOption) (*resources.UserListResp, error)
	// 账户-创建用户
	CreateUser(ctx context.Context, in *resources.CreateUserReq, opts ...grpc.CallOption) (*resources.CreateUserResp, error)
	// 账户-创建用户by手机
	CreateUserByPhone(ctx context.Context, in *resources.CreateUserByPhoneReq, opts ...grpc.CallOption) (*resources.CreateUserResp, error)
	// 账户-创建用户by邮箱
	CreateUserByEmail(ctx context.Context, in *resources.CreateUserByEmailReq, opts ...grpc.CallOption) (*resources.CreateUserResp, error)
	// 账户-创建or获取用户by手机
	CreateOrGetUserByPhone(ctx context.Context, in *resources.CreateUserByPhoneReq, opts ...grpc.CallOption) (*resources.CreateOrGetUserResp, error)
	// 账户-创建or获取用户by邮箱
	CreateOrGetUserByEmail(ctx context.Context, in *resources.CreateUserByEmailReq, opts ...grpc.CallOption) (*resources.CreateOrGetUserResp, error)
}

type srvAccountV1Client struct {
	cc grpc.ClientConnInterface
}

func NewSrvAccountV1Client(cc grpc.ClientConnInterface) SrvAccountV1Client {
	return &srvAccountV1Client{cc}
}

func (c *srvAccountV1Client) Ping(ctx context.Context, in *resources.PingReq, opts ...grpc.CallOption) (*resources.PingResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.PingResp)
	err := c.cc.Invoke(ctx, SrvAccountV1_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvAccountV1Client) GetUserInfo(ctx context.Context, in *resources.GetUserInfoReq, opts ...grpc.CallOption) (*resources.GetUserInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.GetUserInfoResp)
	err := c.cc.Invoke(ctx, SrvAccountV1_GetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvAccountV1Client) GetUserInfoList(ctx context.Context, in *resources.GetUserInfoListReq, opts ...grpc.CallOption) (*resources.GetUserInfoListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.GetUserInfoListResp)
	err := c.cc.Invoke(ctx, SrvAccountV1_GetUserInfoList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvAccountV1Client) GetUserList(ctx context.Context, in *resources.UserListReq, opts ...grpc.CallOption) (*resources.UserListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.UserListResp)
	err := c.cc.Invoke(ctx, SrvAccountV1_GetUserList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvAccountV1Client) CreateUser(ctx context.Context, in *resources.CreateUserReq, opts ...grpc.CallOption) (*resources.CreateUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.CreateUserResp)
	err := c.cc.Invoke(ctx, SrvAccountV1_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvAccountV1Client) CreateUserByPhone(ctx context.Context, in *resources.CreateUserByPhoneReq, opts ...grpc.CallOption) (*resources.CreateUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.CreateUserResp)
	err := c.cc.Invoke(ctx, SrvAccountV1_CreateUserByPhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvAccountV1Client) CreateUserByEmail(ctx context.Context, in *resources.CreateUserByEmailReq, opts ...grpc.CallOption) (*resources.CreateUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.CreateUserResp)
	err := c.cc.Invoke(ctx, SrvAccountV1_CreateUserByEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvAccountV1Client) CreateOrGetUserByPhone(ctx context.Context, in *resources.CreateUserByPhoneReq, opts ...grpc.CallOption) (*resources.CreateOrGetUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.CreateOrGetUserResp)
	err := c.cc.Invoke(ctx, SrvAccountV1_CreateOrGetUserByPhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvAccountV1Client) CreateOrGetUserByEmail(ctx context.Context, in *resources.CreateUserByEmailReq, opts ...grpc.CallOption) (*resources.CreateOrGetUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.CreateOrGetUserResp)
	err := c.cc.Invoke(ctx, SrvAccountV1_CreateOrGetUserByEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SrvAccountV1Server is the server API for SrvAccountV1 service.
// All implementations must embed UnimplementedSrvAccountV1Server
// for forward compatibility.
//
// SrvAccountV1 account service
type SrvAccountV1Server interface {
	// 账户-Ping测试
	Ping(context.Context, *resources.PingReq) (*resources.PingResp, error)
	// 账户-获取用户信息
	GetUserInfo(context.Context, *resources.GetUserInfoReq) (*resources.GetUserInfoResp, error)
	// 账户-获取用户信息列表
	GetUserInfoList(context.Context, *resources.GetUserInfoListReq) (*resources.GetUserInfoListResp, error)
	// 账户-获取用户列表
	GetUserList(context.Context, *resources.UserListReq) (*resources.UserListResp, error)
	// 账户-创建用户
	CreateUser(context.Context, *resources.CreateUserReq) (*resources.CreateUserResp, error)
	// 账户-创建用户by手机
	CreateUserByPhone(context.Context, *resources.CreateUserByPhoneReq) (*resources.CreateUserResp, error)
	// 账户-创建用户by邮箱
	CreateUserByEmail(context.Context, *resources.CreateUserByEmailReq) (*resources.CreateUserResp, error)
	// 账户-创建or获取用户by手机
	CreateOrGetUserByPhone(context.Context, *resources.CreateUserByPhoneReq) (*resources.CreateOrGetUserResp, error)
	// 账户-创建or获取用户by邮箱
	CreateOrGetUserByEmail(context.Context, *resources.CreateUserByEmailReq) (*resources.CreateOrGetUserResp, error)
	mustEmbedUnimplementedSrvAccountV1Server()
}

// UnimplementedSrvAccountV1Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSrvAccountV1Server struct{}

func (UnimplementedSrvAccountV1Server) Ping(context.Context, *resources.PingReq) (*resources.PingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSrvAccountV1Server) GetUserInfo(context.Context, *resources.GetUserInfoReq) (*resources.GetUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedSrvAccountV1Server) GetUserInfoList(context.Context, *resources.GetUserInfoListReq) (*resources.GetUserInfoListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoList not implemented")
}
func (UnimplementedSrvAccountV1Server) GetUserList(context.Context, *resources.UserListReq) (*resources.UserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (UnimplementedSrvAccountV1Server) CreateUser(context.Context, *resources.CreateUserReq) (*resources.CreateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedSrvAccountV1Server) CreateUserByPhone(context.Context, *resources.CreateUserByPhoneReq) (*resources.CreateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserByPhone not implemented")
}
func (UnimplementedSrvAccountV1Server) CreateUserByEmail(context.Context, *resources.CreateUserByEmailReq) (*resources.CreateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserByEmail not implemented")
}
func (UnimplementedSrvAccountV1Server) CreateOrGetUserByPhone(context.Context, *resources.CreateUserByPhoneReq) (*resources.CreateOrGetUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrGetUserByPhone not implemented")
}
func (UnimplementedSrvAccountV1Server) CreateOrGetUserByEmail(context.Context, *resources.CreateUserByEmailReq) (*resources.CreateOrGetUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrGetUserByEmail not implemented")
}
func (UnimplementedSrvAccountV1Server) mustEmbedUnimplementedSrvAccountV1Server() {}
func (UnimplementedSrvAccountV1Server) testEmbeddedByValue()                      {}

// UnsafeSrvAccountV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SrvAccountV1Server will
// result in compilation errors.
type UnsafeSrvAccountV1Server interface {
	mustEmbedUnimplementedSrvAccountV1Server()
}

func RegisterSrvAccountV1Server(s grpc.ServiceRegistrar, srv SrvAccountV1Server) {
	// If the following call pancis, it indicates UnimplementedSrvAccountV1Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SrvAccountV1_ServiceDesc, srv)
}

func _SrvAccountV1_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvAccountV1Server).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvAccountV1_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvAccountV1Server).Ping(ctx, req.(*resources.PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvAccountV1_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvAccountV1Server).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvAccountV1_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvAccountV1Server).GetUserInfo(ctx, req.(*resources.GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvAccountV1_GetUserInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.GetUserInfoListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvAccountV1Server).GetUserInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvAccountV1_GetUserInfoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvAccountV1Server).GetUserInfoList(ctx, req.(*resources.GetUserInfoListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvAccountV1_GetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvAccountV1Server).GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvAccountV1_GetUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvAccountV1Server).GetUserList(ctx, req.(*resources.UserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvAccountV1_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvAccountV1Server).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvAccountV1_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvAccountV1Server).CreateUser(ctx, req.(*resources.CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvAccountV1_CreateUserByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateUserByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvAccountV1Server).CreateUserByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvAccountV1_CreateUserByPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvAccountV1Server).CreateUserByPhone(ctx, req.(*resources.CreateUserByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvAccountV1_CreateUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateUserByEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvAccountV1Server).CreateUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvAccountV1_CreateUserByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvAccountV1Server).CreateUserByEmail(ctx, req.(*resources.CreateUserByEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvAccountV1_CreateOrGetUserByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateUserByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvAccountV1Server).CreateOrGetUserByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvAccountV1_CreateOrGetUserByPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvAccountV1Server).CreateOrGetUserByPhone(ctx, req.(*resources.CreateUserByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvAccountV1_CreateOrGetUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateUserByEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvAccountV1Server).CreateOrGetUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvAccountV1_CreateOrGetUserByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvAccountV1Server).CreateOrGetUserByEmail(ctx, req.(*resources.CreateUserByEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SrvAccountV1_ServiceDesc is the grpc.ServiceDesc for SrvAccountV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SrvAccountV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "saas.api.account.servicev1.SrvAccountV1",
	HandlerType: (*SrvAccountV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _SrvAccountV1_Ping_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _SrvAccountV1_GetUserInfo_Handler,
		},
		{
			MethodName: "GetUserInfoList",
			Handler:    _SrvAccountV1_GetUserInfoList_Handler,
		},
		{
			MethodName: "GetUserList",
			Handler:    _SrvAccountV1_GetUserList_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _SrvAccountV1_CreateUser_Handler,
		},
		{
			MethodName: "CreateUserByPhone",
			Handler:    _SrvAccountV1_CreateUserByPhone_Handler,
		},
		{
			MethodName: "CreateUserByEmail",
			Handler:    _SrvAccountV1_CreateUserByEmail_Handler,
		},
		{
			MethodName: "CreateOrGetUserByPhone",
			Handler:    _SrvAccountV1_CreateOrGetUserByPhone_Handler,
		},
		{
			MethodName: "CreateOrGetUserByEmail",
			Handler:    _SrvAccountV1_CreateOrGetUserByEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/account-service/v1/services/account.service.v1.proto",
}
