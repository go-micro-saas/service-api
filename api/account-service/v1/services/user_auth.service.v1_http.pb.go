// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.30.2
// source: api/account-service/v1/services/user_auth.service.v1.proto

package servicev1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	resources "github.com/go-micro-saas/service-api/api/account-service/v1/resources"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSrvUserAuthV1LoginByEmail = "/saas.api.account.servicev1.SrvUserAuthV1/LoginByEmail"
const OperationSrvUserAuthV1LoginByOpenApi = "/saas.api.account.servicev1.SrvUserAuthV1/LoginByOpenApi"
const OperationSrvUserAuthV1LoginByPhone = "/saas.api.account.servicev1.SrvUserAuthV1/LoginByPhone"
const OperationSrvUserAuthV1LoginOrSignupByEmail = "/saas.api.account.servicev1.SrvUserAuthV1/LoginOrSignupByEmail"
const OperationSrvUserAuthV1LoginOrSignupByPhone = "/saas.api.account.servicev1.SrvUserAuthV1/LoginOrSignupByPhone"
const OperationSrvUserAuthV1Ping = "/saas.api.account.servicev1.SrvUserAuthV1/Ping"
const OperationSrvUserAuthV1RefreshToken = "/saas.api.account.servicev1.SrvUserAuthV1/RefreshToken"
const OperationSrvUserAuthV1SendEmailChangeCode = "/saas.api.account.servicev1.SrvUserAuthV1/SendEmailChangeCode"
const OperationSrvUserAuthV1SendEmailChangePasswdCode = "/saas.api.account.servicev1.SrvUserAuthV1/SendEmailChangePasswdCode"
const OperationSrvUserAuthV1SendEmailForgotPasswdCode = "/saas.api.account.servicev1.SrvUserAuthV1/SendEmailForgotPasswdCode"
const OperationSrvUserAuthV1SendEmailLoginCode = "/saas.api.account.servicev1.SrvUserAuthV1/SendEmailLoginCode"
const OperationSrvUserAuthV1SendEmailSignupCode = "/saas.api.account.servicev1.SrvUserAuthV1/SendEmailSignupCode"
const OperationSrvUserAuthV1SendEmailSignupOrLoginCode = "/saas.api.account.servicev1.SrvUserAuthV1/SendEmailSignupOrLoginCode"
const OperationSrvUserAuthV1SendPhoneChangeCode = "/saas.api.account.servicev1.SrvUserAuthV1/SendPhoneChangeCode"
const OperationSrvUserAuthV1SendPhoneChangePasswdCode = "/saas.api.account.servicev1.SrvUserAuthV1/SendPhoneChangePasswdCode"
const OperationSrvUserAuthV1SendPhoneForgotPasswdCode = "/saas.api.account.servicev1.SrvUserAuthV1/SendPhoneForgotPasswdCode"
const OperationSrvUserAuthV1SendPhoneLoginCode = "/saas.api.account.servicev1.SrvUserAuthV1/SendPhoneLoginCode"
const OperationSrvUserAuthV1SendPhoneSignupCode = "/saas.api.account.servicev1.SrvUserAuthV1/SendPhoneSignupCode"
const OperationSrvUserAuthV1SendPhoneSignupOrLoginCode = "/saas.api.account.servicev1.SrvUserAuthV1/SendPhoneSignupOrLoginCode"
const OperationSrvUserAuthV1SignupByEmail = "/saas.api.account.servicev1.SrvUserAuthV1/SignupByEmail"
const OperationSrvUserAuthV1SignupByPhone = "/saas.api.account.servicev1.SrvUserAuthV1/SignupByPhone"

type SrvUserAuthV1HTTPServer interface {
	// LoginByEmail 身份验证-Email登录
	LoginByEmail(context.Context, *resources.LoginByEmailReq) (*resources.LoginResp, error)
	// LoginByOpenApi 身份验证-开发平台登录
	LoginByOpenApi(context.Context, *resources.LoginByOpenApiReq) (*resources.LoginResp, error)
	// LoginByPhone 身份验证-手机登录
	LoginByPhone(context.Context, *resources.LoginByPhoneReq) (*resources.LoginResp, error)
	// LoginOrSignupByEmail 身份验证-邮箱登陆(自动注册)
	LoginOrSignupByEmail(context.Context, *resources.LoginOrSignupByEmailReq) (*resources.LoginResp, error)
	// LoginOrSignupByPhone 身份验证-手机登陆(自动注册)
	LoginOrSignupByPhone(context.Context, *resources.LoginOrSignupByPhoneReq) (*resources.LoginResp, error)
	// Ping 身份验证-Ping测试
	Ping(context.Context, *resources.PingReq) (*resources.PingResp, error)
	// RefreshToken 身份验证-刷新Token
	RefreshToken(context.Context, *resources.RefreshTokenReq) (*resources.LoginResp, error)
	// SendEmailChangeCode 身份验证-发送邮箱变更码
	SendEmailChangeCode(context.Context, *resources.SendEmailVerifyCodeReq) (*resources.SendVerifyCodeResp, error)
	// SendEmailChangePasswdCode 身份验证-发送邮箱验证码(修改密码)
	SendEmailChangePasswdCode(context.Context, *resources.SendEmailVerifyCodeReq) (*resources.SendVerifyCodeResp, error)
	// SendEmailForgotPasswdCode 身份验证-发送邮箱验证码(忘记密码)
	SendEmailForgotPasswdCode(context.Context, *resources.SendEmailVerifyCodeReq) (*resources.SendVerifyCodeResp, error)
	// SendEmailLoginCode 身份验证-发送邮箱登录码
	SendEmailLoginCode(context.Context, *resources.SendEmailVerifyCodeReq) (*resources.SendVerifyCodeResp, error)
	// SendEmailSignupCode 身份验证-发送邮箱注册码
	SendEmailSignupCode(context.Context, *resources.SendEmailVerifyCodeReq) (*resources.SendVerifyCodeResp, error)
	// SendEmailSignupOrLoginCode 身份验证-发送邮箱注册or登录码
	SendEmailSignupOrLoginCode(context.Context, *resources.SendEmailVerifyCodeReq) (*resources.SendVerifyCodeResp, error)
	// SendPhoneChangeCode 身份验证-发送手机变更码
	SendPhoneChangeCode(context.Context, *resources.SendPhoneVerifyCodeReq) (*resources.SendVerifyCodeResp, error)
	// SendPhoneChangePasswdCode 身份验证-发送手机验证码(修改密码)
	SendPhoneChangePasswdCode(context.Context, *resources.SendPhoneVerifyCodeReq) (*resources.SendVerifyCodeResp, error)
	// SendPhoneForgotPasswdCode 身份验证-发送手机验证码(忘记密码)
	SendPhoneForgotPasswdCode(context.Context, *resources.SendPhoneVerifyCodeReq) (*resources.SendVerifyCodeResp, error)
	// SendPhoneLoginCode 身份验证-发送手机登录码
	SendPhoneLoginCode(context.Context, *resources.SendPhoneVerifyCodeReq) (*resources.SendVerifyCodeResp, error)
	// SendPhoneSignupCode 身份验证-发送手机注册码
	SendPhoneSignupCode(context.Context, *resources.SendPhoneVerifyCodeReq) (*resources.SendVerifyCodeResp, error)
	// SendPhoneSignupOrLoginCode 身份验证-发送手机注册or登录码
	SendPhoneSignupOrLoginCode(context.Context, *resources.SendPhoneVerifyCodeReq) (*resources.SendVerifyCodeResp, error)
	// SignupByEmail 身份验证-Email注册
	SignupByEmail(context.Context, *resources.SignupByEmailReq) (*resources.LoginResp, error)
	// SignupByPhone 身份验证-手机注册
	SignupByPhone(context.Context, *resources.SignupByPhoneReq) (*resources.LoginResp, error)
}

func RegisterSrvUserAuthV1HTTPServer(s *http.Server, srv SrvUserAuthV1HTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/account/auth/ping", _SrvUserAuthV1_Ping2_HTTP_Handler(srv))
	r.POST("/api/v1/account/auth/signup-by-email", _SrvUserAuthV1_SignupByEmail0_HTTP_Handler(srv))
	r.POST("/api/v1/account/auth/signup-by-phone", _SrvUserAuthV1_SignupByPhone0_HTTP_Handler(srv))
	r.POST("/api/v1/account/auth/login-or-signup-by-phone", _SrvUserAuthV1_LoginOrSignupByPhone0_HTTP_Handler(srv))
	r.POST("/api/v1/account/auth/login-or-signup-by-email", _SrvUserAuthV1_LoginOrSignupByEmail0_HTTP_Handler(srv))
	r.POST("/api/v1/account/auth/refresh-token", _SrvUserAuthV1_RefreshToken0_HTTP_Handler(srv))
	r.POST("/api/v1/account/auth/login-by-email", _SrvUserAuthV1_LoginByEmail0_HTTP_Handler(srv))
	r.POST("/api/v1/account/auth/login-by-phone", _SrvUserAuthV1_LoginByPhone0_HTTP_Handler(srv))
	r.POST("/api/v1/open-api/auth/login", _SrvUserAuthV1_LoginByOpenApi0_HTTP_Handler(srv))
	r.POST("/api/v1/account/auth/send-phone-signup-code", _SrvUserAuthV1_SendPhoneSignupCode0_HTTP_Handler(srv))
	r.POST("/api/v1/account/auth/send-email-signup-code", _SrvUserAuthV1_SendEmailSignupCode0_HTTP_Handler(srv))
	r.POST("/api/v1/account/auth/send-phone-signup-or-login-code", _SrvUserAuthV1_SendPhoneSignupOrLoginCode0_HTTP_Handler(srv))
	r.POST("/api/v1/account/auth/send-email-signup-or-login-code", _SrvUserAuthV1_SendEmailSignupOrLoginCode0_HTTP_Handler(srv))
	r.POST("/api/v1/account/auth/send-email-login-code", _SrvUserAuthV1_SendEmailLoginCode0_HTTP_Handler(srv))
	r.POST("/api/v1/account/auth/send-phone-login-code", _SrvUserAuthV1_SendPhoneLoginCode0_HTTP_Handler(srv))
	r.POST("/api/v1/account/auth/send-email-forgot-passwd-code", _SrvUserAuthV1_SendEmailForgotPasswdCode0_HTTP_Handler(srv))
	r.POST("/api/v1/account/auth/send-phone-forgot-passwd-code", _SrvUserAuthV1_SendPhoneForgotPasswdCode0_HTTP_Handler(srv))
	r.POST("/api/v1/account/auth/send-email-change-passwd-code", _SrvUserAuthV1_SendEmailChangePasswdCode0_HTTP_Handler(srv))
	r.POST("/api/v1/account/auth/send-phone-change-passwd-code", _SrvUserAuthV1_SendPhoneChangePasswdCode0_HTTP_Handler(srv))
	r.POST("/api/v1/account/auth/send-email-change-code", _SrvUserAuthV1_SendEmailChangeCode0_HTTP_Handler(srv))
	r.POST("/api/v1/account/auth/send-phone-change-code", _SrvUserAuthV1_SendPhoneChangeCode0_HTTP_Handler(srv))
}

func _SrvUserAuthV1_Ping2_HTTP_Handler(srv SrvUserAuthV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.PingReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserAuthV1Ping)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Ping(ctx, req.(*resources.PingReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.PingResp)
		return ctx.Result(200, reply)
	}
}

func _SrvUserAuthV1_SignupByEmail0_HTTP_Handler(srv SrvUserAuthV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.SignupByEmailReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserAuthV1SignupByEmail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SignupByEmail(ctx, req.(*resources.SignupByEmailReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.LoginResp)
		return ctx.Result(200, reply)
	}
}

func _SrvUserAuthV1_SignupByPhone0_HTTP_Handler(srv SrvUserAuthV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.SignupByPhoneReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserAuthV1SignupByPhone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SignupByPhone(ctx, req.(*resources.SignupByPhoneReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.LoginResp)
		return ctx.Result(200, reply)
	}
}

func _SrvUserAuthV1_LoginOrSignupByPhone0_HTTP_Handler(srv SrvUserAuthV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.LoginOrSignupByPhoneReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserAuthV1LoginOrSignupByPhone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginOrSignupByPhone(ctx, req.(*resources.LoginOrSignupByPhoneReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.LoginResp)
		return ctx.Result(200, reply)
	}
}

func _SrvUserAuthV1_LoginOrSignupByEmail0_HTTP_Handler(srv SrvUserAuthV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.LoginOrSignupByEmailReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserAuthV1LoginOrSignupByEmail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginOrSignupByEmail(ctx, req.(*resources.LoginOrSignupByEmailReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.LoginResp)
		return ctx.Result(200, reply)
	}
}

func _SrvUserAuthV1_RefreshToken0_HTTP_Handler(srv SrvUserAuthV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.RefreshTokenReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserAuthV1RefreshToken)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RefreshToken(ctx, req.(*resources.RefreshTokenReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.LoginResp)
		return ctx.Result(200, reply)
	}
}

func _SrvUserAuthV1_LoginByEmail0_HTTP_Handler(srv SrvUserAuthV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.LoginByEmailReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserAuthV1LoginByEmail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginByEmail(ctx, req.(*resources.LoginByEmailReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.LoginResp)
		return ctx.Result(200, reply)
	}
}

func _SrvUserAuthV1_LoginByPhone0_HTTP_Handler(srv SrvUserAuthV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.LoginByPhoneReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserAuthV1LoginByPhone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginByPhone(ctx, req.(*resources.LoginByPhoneReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.LoginResp)
		return ctx.Result(200, reply)
	}
}

func _SrvUserAuthV1_LoginByOpenApi0_HTTP_Handler(srv SrvUserAuthV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.LoginByOpenApiReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserAuthV1LoginByOpenApi)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginByOpenApi(ctx, req.(*resources.LoginByOpenApiReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.LoginResp)
		return ctx.Result(200, reply)
	}
}

func _SrvUserAuthV1_SendPhoneSignupCode0_HTTP_Handler(srv SrvUserAuthV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.SendPhoneVerifyCodeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserAuthV1SendPhoneSignupCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendPhoneSignupCode(ctx, req.(*resources.SendPhoneVerifyCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.SendVerifyCodeResp)
		return ctx.Result(200, reply)
	}
}

func _SrvUserAuthV1_SendEmailSignupCode0_HTTP_Handler(srv SrvUserAuthV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.SendEmailVerifyCodeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserAuthV1SendEmailSignupCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendEmailSignupCode(ctx, req.(*resources.SendEmailVerifyCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.SendVerifyCodeResp)
		return ctx.Result(200, reply)
	}
}

func _SrvUserAuthV1_SendPhoneSignupOrLoginCode0_HTTP_Handler(srv SrvUserAuthV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.SendPhoneVerifyCodeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserAuthV1SendPhoneSignupOrLoginCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendPhoneSignupOrLoginCode(ctx, req.(*resources.SendPhoneVerifyCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.SendVerifyCodeResp)
		return ctx.Result(200, reply)
	}
}

func _SrvUserAuthV1_SendEmailSignupOrLoginCode0_HTTP_Handler(srv SrvUserAuthV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.SendEmailVerifyCodeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserAuthV1SendEmailSignupOrLoginCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendEmailSignupOrLoginCode(ctx, req.(*resources.SendEmailVerifyCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.SendVerifyCodeResp)
		return ctx.Result(200, reply)
	}
}

func _SrvUserAuthV1_SendEmailLoginCode0_HTTP_Handler(srv SrvUserAuthV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.SendEmailVerifyCodeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserAuthV1SendEmailLoginCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendEmailLoginCode(ctx, req.(*resources.SendEmailVerifyCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.SendVerifyCodeResp)
		return ctx.Result(200, reply)
	}
}

func _SrvUserAuthV1_SendPhoneLoginCode0_HTTP_Handler(srv SrvUserAuthV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.SendPhoneVerifyCodeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserAuthV1SendPhoneLoginCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendPhoneLoginCode(ctx, req.(*resources.SendPhoneVerifyCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.SendVerifyCodeResp)
		return ctx.Result(200, reply)
	}
}

func _SrvUserAuthV1_SendEmailForgotPasswdCode0_HTTP_Handler(srv SrvUserAuthV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.SendEmailVerifyCodeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserAuthV1SendEmailForgotPasswdCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendEmailForgotPasswdCode(ctx, req.(*resources.SendEmailVerifyCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.SendVerifyCodeResp)
		return ctx.Result(200, reply)
	}
}

func _SrvUserAuthV1_SendPhoneForgotPasswdCode0_HTTP_Handler(srv SrvUserAuthV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.SendPhoneVerifyCodeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserAuthV1SendPhoneForgotPasswdCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendPhoneForgotPasswdCode(ctx, req.(*resources.SendPhoneVerifyCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.SendVerifyCodeResp)
		return ctx.Result(200, reply)
	}
}

func _SrvUserAuthV1_SendEmailChangePasswdCode0_HTTP_Handler(srv SrvUserAuthV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.SendEmailVerifyCodeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserAuthV1SendEmailChangePasswdCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendEmailChangePasswdCode(ctx, req.(*resources.SendEmailVerifyCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.SendVerifyCodeResp)
		return ctx.Result(200, reply)
	}
}

func _SrvUserAuthV1_SendPhoneChangePasswdCode0_HTTP_Handler(srv SrvUserAuthV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.SendPhoneVerifyCodeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserAuthV1SendPhoneChangePasswdCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendPhoneChangePasswdCode(ctx, req.(*resources.SendPhoneVerifyCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.SendVerifyCodeResp)
		return ctx.Result(200, reply)
	}
}

func _SrvUserAuthV1_SendEmailChangeCode0_HTTP_Handler(srv SrvUserAuthV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.SendEmailVerifyCodeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserAuthV1SendEmailChangeCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendEmailChangeCode(ctx, req.(*resources.SendEmailVerifyCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.SendVerifyCodeResp)
		return ctx.Result(200, reply)
	}
}

func _SrvUserAuthV1_SendPhoneChangeCode0_HTTP_Handler(srv SrvUserAuthV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.SendPhoneVerifyCodeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvUserAuthV1SendPhoneChangeCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendPhoneChangeCode(ctx, req.(*resources.SendPhoneVerifyCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.SendVerifyCodeResp)
		return ctx.Result(200, reply)
	}
}

type SrvUserAuthV1HTTPClient interface {
	LoginByEmail(ctx context.Context, req *resources.LoginByEmailReq, opts ...http.CallOption) (rsp *resources.LoginResp, err error)
	LoginByOpenApi(ctx context.Context, req *resources.LoginByOpenApiReq, opts ...http.CallOption) (rsp *resources.LoginResp, err error)
	LoginByPhone(ctx context.Context, req *resources.LoginByPhoneReq, opts ...http.CallOption) (rsp *resources.LoginResp, err error)
	LoginOrSignupByEmail(ctx context.Context, req *resources.LoginOrSignupByEmailReq, opts ...http.CallOption) (rsp *resources.LoginResp, err error)
	LoginOrSignupByPhone(ctx context.Context, req *resources.LoginOrSignupByPhoneReq, opts ...http.CallOption) (rsp *resources.LoginResp, err error)
	Ping(ctx context.Context, req *resources.PingReq, opts ...http.CallOption) (rsp *resources.PingResp, err error)
	RefreshToken(ctx context.Context, req *resources.RefreshTokenReq, opts ...http.CallOption) (rsp *resources.LoginResp, err error)
	SendEmailChangeCode(ctx context.Context, req *resources.SendEmailVerifyCodeReq, opts ...http.CallOption) (rsp *resources.SendVerifyCodeResp, err error)
	SendEmailChangePasswdCode(ctx context.Context, req *resources.SendEmailVerifyCodeReq, opts ...http.CallOption) (rsp *resources.SendVerifyCodeResp, err error)
	SendEmailForgotPasswdCode(ctx context.Context, req *resources.SendEmailVerifyCodeReq, opts ...http.CallOption) (rsp *resources.SendVerifyCodeResp, err error)
	SendEmailLoginCode(ctx context.Context, req *resources.SendEmailVerifyCodeReq, opts ...http.CallOption) (rsp *resources.SendVerifyCodeResp, err error)
	SendEmailSignupCode(ctx context.Context, req *resources.SendEmailVerifyCodeReq, opts ...http.CallOption) (rsp *resources.SendVerifyCodeResp, err error)
	SendEmailSignupOrLoginCode(ctx context.Context, req *resources.SendEmailVerifyCodeReq, opts ...http.CallOption) (rsp *resources.SendVerifyCodeResp, err error)
	SendPhoneChangeCode(ctx context.Context, req *resources.SendPhoneVerifyCodeReq, opts ...http.CallOption) (rsp *resources.SendVerifyCodeResp, err error)
	SendPhoneChangePasswdCode(ctx context.Context, req *resources.SendPhoneVerifyCodeReq, opts ...http.CallOption) (rsp *resources.SendVerifyCodeResp, err error)
	SendPhoneForgotPasswdCode(ctx context.Context, req *resources.SendPhoneVerifyCodeReq, opts ...http.CallOption) (rsp *resources.SendVerifyCodeResp, err error)
	SendPhoneLoginCode(ctx context.Context, req *resources.SendPhoneVerifyCodeReq, opts ...http.CallOption) (rsp *resources.SendVerifyCodeResp, err error)
	SendPhoneSignupCode(ctx context.Context, req *resources.SendPhoneVerifyCodeReq, opts ...http.CallOption) (rsp *resources.SendVerifyCodeResp, err error)
	SendPhoneSignupOrLoginCode(ctx context.Context, req *resources.SendPhoneVerifyCodeReq, opts ...http.CallOption) (rsp *resources.SendVerifyCodeResp, err error)
	SignupByEmail(ctx context.Context, req *resources.SignupByEmailReq, opts ...http.CallOption) (rsp *resources.LoginResp, err error)
	SignupByPhone(ctx context.Context, req *resources.SignupByPhoneReq, opts ...http.CallOption) (rsp *resources.LoginResp, err error)
}

type SrvUserAuthV1HTTPClientImpl struct {
	cc *http.Client
}

func NewSrvUserAuthV1HTTPClient(client *http.Client) SrvUserAuthV1HTTPClient {
	return &SrvUserAuthV1HTTPClientImpl{client}
}

func (c *SrvUserAuthV1HTTPClientImpl) LoginByEmail(ctx context.Context, in *resources.LoginByEmailReq, opts ...http.CallOption) (*resources.LoginResp, error) {
	var out resources.LoginResp
	pattern := "/api/v1/account/auth/login-by-email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserAuthV1LoginByEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SrvUserAuthV1HTTPClientImpl) LoginByOpenApi(ctx context.Context, in *resources.LoginByOpenApiReq, opts ...http.CallOption) (*resources.LoginResp, error) {
	var out resources.LoginResp
	pattern := "/api/v1/open-api/auth/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserAuthV1LoginByOpenApi))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SrvUserAuthV1HTTPClientImpl) LoginByPhone(ctx context.Context, in *resources.LoginByPhoneReq, opts ...http.CallOption) (*resources.LoginResp, error) {
	var out resources.LoginResp
	pattern := "/api/v1/account/auth/login-by-phone"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserAuthV1LoginByPhone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SrvUserAuthV1HTTPClientImpl) LoginOrSignupByEmail(ctx context.Context, in *resources.LoginOrSignupByEmailReq, opts ...http.CallOption) (*resources.LoginResp, error) {
	var out resources.LoginResp
	pattern := "/api/v1/account/auth/login-or-signup-by-email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserAuthV1LoginOrSignupByEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SrvUserAuthV1HTTPClientImpl) LoginOrSignupByPhone(ctx context.Context, in *resources.LoginOrSignupByPhoneReq, opts ...http.CallOption) (*resources.LoginResp, error) {
	var out resources.LoginResp
	pattern := "/api/v1/account/auth/login-or-signup-by-phone"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserAuthV1LoginOrSignupByPhone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SrvUserAuthV1HTTPClientImpl) Ping(ctx context.Context, in *resources.PingReq, opts ...http.CallOption) (*resources.PingResp, error) {
	var out resources.PingResp
	pattern := "/api/v1/account/auth/ping"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSrvUserAuthV1Ping))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SrvUserAuthV1HTTPClientImpl) RefreshToken(ctx context.Context, in *resources.RefreshTokenReq, opts ...http.CallOption) (*resources.LoginResp, error) {
	var out resources.LoginResp
	pattern := "/api/v1/account/auth/refresh-token"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserAuthV1RefreshToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SrvUserAuthV1HTTPClientImpl) SendEmailChangeCode(ctx context.Context, in *resources.SendEmailVerifyCodeReq, opts ...http.CallOption) (*resources.SendVerifyCodeResp, error) {
	var out resources.SendVerifyCodeResp
	pattern := "/api/v1/account/auth/send-email-change-code"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserAuthV1SendEmailChangeCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SrvUserAuthV1HTTPClientImpl) SendEmailChangePasswdCode(ctx context.Context, in *resources.SendEmailVerifyCodeReq, opts ...http.CallOption) (*resources.SendVerifyCodeResp, error) {
	var out resources.SendVerifyCodeResp
	pattern := "/api/v1/account/auth/send-email-change-passwd-code"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserAuthV1SendEmailChangePasswdCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SrvUserAuthV1HTTPClientImpl) SendEmailForgotPasswdCode(ctx context.Context, in *resources.SendEmailVerifyCodeReq, opts ...http.CallOption) (*resources.SendVerifyCodeResp, error) {
	var out resources.SendVerifyCodeResp
	pattern := "/api/v1/account/auth/send-email-forgot-passwd-code"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserAuthV1SendEmailForgotPasswdCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SrvUserAuthV1HTTPClientImpl) SendEmailLoginCode(ctx context.Context, in *resources.SendEmailVerifyCodeReq, opts ...http.CallOption) (*resources.SendVerifyCodeResp, error) {
	var out resources.SendVerifyCodeResp
	pattern := "/api/v1/account/auth/send-email-login-code"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserAuthV1SendEmailLoginCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SrvUserAuthV1HTTPClientImpl) SendEmailSignupCode(ctx context.Context, in *resources.SendEmailVerifyCodeReq, opts ...http.CallOption) (*resources.SendVerifyCodeResp, error) {
	var out resources.SendVerifyCodeResp
	pattern := "/api/v1/account/auth/send-email-signup-code"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserAuthV1SendEmailSignupCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SrvUserAuthV1HTTPClientImpl) SendEmailSignupOrLoginCode(ctx context.Context, in *resources.SendEmailVerifyCodeReq, opts ...http.CallOption) (*resources.SendVerifyCodeResp, error) {
	var out resources.SendVerifyCodeResp
	pattern := "/api/v1/account/auth/send-email-signup-or-login-code"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserAuthV1SendEmailSignupOrLoginCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SrvUserAuthV1HTTPClientImpl) SendPhoneChangeCode(ctx context.Context, in *resources.SendPhoneVerifyCodeReq, opts ...http.CallOption) (*resources.SendVerifyCodeResp, error) {
	var out resources.SendVerifyCodeResp
	pattern := "/api/v1/account/auth/send-phone-change-code"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserAuthV1SendPhoneChangeCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SrvUserAuthV1HTTPClientImpl) SendPhoneChangePasswdCode(ctx context.Context, in *resources.SendPhoneVerifyCodeReq, opts ...http.CallOption) (*resources.SendVerifyCodeResp, error) {
	var out resources.SendVerifyCodeResp
	pattern := "/api/v1/account/auth/send-phone-change-passwd-code"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserAuthV1SendPhoneChangePasswdCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SrvUserAuthV1HTTPClientImpl) SendPhoneForgotPasswdCode(ctx context.Context, in *resources.SendPhoneVerifyCodeReq, opts ...http.CallOption) (*resources.SendVerifyCodeResp, error) {
	var out resources.SendVerifyCodeResp
	pattern := "/api/v1/account/auth/send-phone-forgot-passwd-code"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserAuthV1SendPhoneForgotPasswdCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SrvUserAuthV1HTTPClientImpl) SendPhoneLoginCode(ctx context.Context, in *resources.SendPhoneVerifyCodeReq, opts ...http.CallOption) (*resources.SendVerifyCodeResp, error) {
	var out resources.SendVerifyCodeResp
	pattern := "/api/v1/account/auth/send-phone-login-code"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserAuthV1SendPhoneLoginCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SrvUserAuthV1HTTPClientImpl) SendPhoneSignupCode(ctx context.Context, in *resources.SendPhoneVerifyCodeReq, opts ...http.CallOption) (*resources.SendVerifyCodeResp, error) {
	var out resources.SendVerifyCodeResp
	pattern := "/api/v1/account/auth/send-phone-signup-code"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserAuthV1SendPhoneSignupCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SrvUserAuthV1HTTPClientImpl) SendPhoneSignupOrLoginCode(ctx context.Context, in *resources.SendPhoneVerifyCodeReq, opts ...http.CallOption) (*resources.SendVerifyCodeResp, error) {
	var out resources.SendVerifyCodeResp
	pattern := "/api/v1/account/auth/send-phone-signup-or-login-code"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserAuthV1SendPhoneSignupOrLoginCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SrvUserAuthV1HTTPClientImpl) SignupByEmail(ctx context.Context, in *resources.SignupByEmailReq, opts ...http.CallOption) (*resources.LoginResp, error) {
	var out resources.LoginResp
	pattern := "/api/v1/account/auth/signup-by-email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserAuthV1SignupByEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SrvUserAuthV1HTTPClientImpl) SignupByPhone(ctx context.Context, in *resources.SignupByPhoneReq, opts ...http.CallOption) (*resources.LoginResp, error) {
	var out resources.LoginResp
	pattern := "/api/v1/account/auth/signup-by-phone"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvUserAuthV1SignupByPhone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
