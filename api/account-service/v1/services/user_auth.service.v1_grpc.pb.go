// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: api/account-service/v1/services/user_auth.service.v1.proto

package servicev1

import (
	context "context"
	resources "github.com/go-micro-saas/service-api/api/account-service/v1/resources"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SrvUserAuthV1_Ping_FullMethodName                       = "/saas.api.account.servicev1.SrvUserAuthV1/Ping"
	SrvUserAuthV1_SignupByEmail_FullMethodName              = "/saas.api.account.servicev1.SrvUserAuthV1/SignupByEmail"
	SrvUserAuthV1_SignupByPhone_FullMethodName              = "/saas.api.account.servicev1.SrvUserAuthV1/SignupByPhone"
	SrvUserAuthV1_LoginOrSignupByPhone_FullMethodName       = "/saas.api.account.servicev1.SrvUserAuthV1/LoginOrSignupByPhone"
	SrvUserAuthV1_LoginOrSignupByEmail_FullMethodName       = "/saas.api.account.servicev1.SrvUserAuthV1/LoginOrSignupByEmail"
	SrvUserAuthV1_RefreshToken_FullMethodName               = "/saas.api.account.servicev1.SrvUserAuthV1/RefreshToken"
	SrvUserAuthV1_LoginByEmail_FullMethodName               = "/saas.api.account.servicev1.SrvUserAuthV1/LoginByEmail"
	SrvUserAuthV1_LoginByPhone_FullMethodName               = "/saas.api.account.servicev1.SrvUserAuthV1/LoginByPhone"
	SrvUserAuthV1_LoginByOpenApi_FullMethodName             = "/saas.api.account.servicev1.SrvUserAuthV1/LoginByOpenApi"
	SrvUserAuthV1_SendPhoneSignupCode_FullMethodName        = "/saas.api.account.servicev1.SrvUserAuthV1/SendPhoneSignupCode"
	SrvUserAuthV1_SendEmailSignupCode_FullMethodName        = "/saas.api.account.servicev1.SrvUserAuthV1/SendEmailSignupCode"
	SrvUserAuthV1_SendPhoneSignupOrLoginCode_FullMethodName = "/saas.api.account.servicev1.SrvUserAuthV1/SendPhoneSignupOrLoginCode"
	SrvUserAuthV1_SendEmailSignupOrLoginCode_FullMethodName = "/saas.api.account.servicev1.SrvUserAuthV1/SendEmailSignupOrLoginCode"
	SrvUserAuthV1_SendEmailLoginCode_FullMethodName         = "/saas.api.account.servicev1.SrvUserAuthV1/SendEmailLoginCode"
	SrvUserAuthV1_SendPhoneLoginCode_FullMethodName         = "/saas.api.account.servicev1.SrvUserAuthV1/SendPhoneLoginCode"
	SrvUserAuthV1_SendEmailForgotPasswdCode_FullMethodName  = "/saas.api.account.servicev1.SrvUserAuthV1/SendEmailForgotPasswdCode"
	SrvUserAuthV1_SendPhoneForgotPasswdCode_FullMethodName  = "/saas.api.account.servicev1.SrvUserAuthV1/SendPhoneForgotPasswdCode"
	SrvUserAuthV1_SendEmailChangePasswdCode_FullMethodName  = "/saas.api.account.servicev1.SrvUserAuthV1/SendEmailChangePasswdCode"
	SrvUserAuthV1_SendPhoneChangePasswdCode_FullMethodName  = "/saas.api.account.servicev1.SrvUserAuthV1/SendPhoneChangePasswdCode"
	SrvUserAuthV1_SendEmailChangeCode_FullMethodName        = "/saas.api.account.servicev1.SrvUserAuthV1/SendEmailChangeCode"
	SrvUserAuthV1_SendPhoneChangeCode_FullMethodName        = "/saas.api.account.servicev1.SrvUserAuthV1/SendPhoneChangeCode"
)

// SrvUserAuthV1Client is the client API for SrvUserAuthV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SrvUserAuthV1 User service
type SrvUserAuthV1Client interface {
	// 身份验证-Ping测试
	Ping(ctx context.Context, in *resources.PingReq, opts ...grpc.CallOption) (*resources.PingResp, error)
	// 身份验证-Email注册
	SignupByEmail(ctx context.Context, in *resources.SignupByEmailReq, opts ...grpc.CallOption) (*resources.LoginResp, error)
	// 身份验证-手机注册
	SignupByPhone(ctx context.Context, in *resources.SignupByPhoneReq, opts ...grpc.CallOption) (*resources.LoginResp, error)
	// 身份验证-手机登陆(自动注册)
	LoginOrSignupByPhone(ctx context.Context, in *resources.LoginOrSignupByPhoneReq, opts ...grpc.CallOption) (*resources.LoginResp, error)
	// 身份验证-邮箱登陆(自动注册)
	LoginOrSignupByEmail(ctx context.Context, in *resources.LoginOrSignupByEmailReq, opts ...grpc.CallOption) (*resources.LoginResp, error)
	// 身份验证-刷新Token
	RefreshToken(ctx context.Context, in *resources.RefreshTokenReq, opts ...grpc.CallOption) (*resources.LoginResp, error)
	// 身份验证-Email登录
	LoginByEmail(ctx context.Context, in *resources.LoginByEmailReq, opts ...grpc.CallOption) (*resources.LoginResp, error)
	// 身份验证-手机登录
	LoginByPhone(ctx context.Context, in *resources.LoginByPhoneReq, opts ...grpc.CallOption) (*resources.LoginResp, error)
	// 身份验证-开发平台登录
	LoginByOpenApi(ctx context.Context, in *resources.LoginByOpenApiReq, opts ...grpc.CallOption) (*resources.LoginResp, error)
	// 身份验证-发送手机注册码
	SendPhoneSignupCode(ctx context.Context, in *resources.SendPhoneVerifyCodeReq, opts ...grpc.CallOption) (*resources.SendVerifyCodeResp, error)
	// 身份验证-发送邮箱注册码
	SendEmailSignupCode(ctx context.Context, in *resources.SendEmailVerifyCodeReq, opts ...grpc.CallOption) (*resources.SendVerifyCodeResp, error)
	// 身份验证-发送手机注册or登录码
	SendPhoneSignupOrLoginCode(ctx context.Context, in *resources.SendPhoneVerifyCodeReq, opts ...grpc.CallOption) (*resources.SendVerifyCodeResp, error)
	// 身份验证-发送邮箱注册or登录码
	SendEmailSignupOrLoginCode(ctx context.Context, in *resources.SendEmailVerifyCodeReq, opts ...grpc.CallOption) (*resources.SendVerifyCodeResp, error)
	// 身份验证-发送邮箱登录码
	SendEmailLoginCode(ctx context.Context, in *resources.SendEmailVerifyCodeReq, opts ...grpc.CallOption) (*resources.SendVerifyCodeResp, error)
	// 身份验证-发送手机登录码
	SendPhoneLoginCode(ctx context.Context, in *resources.SendPhoneVerifyCodeReq, opts ...grpc.CallOption) (*resources.SendVerifyCodeResp, error)
	// 身份验证-发送邮箱验证码(忘记密码)
	SendEmailForgotPasswdCode(ctx context.Context, in *resources.SendEmailVerifyCodeReq, opts ...grpc.CallOption) (*resources.SendVerifyCodeResp, error)
	// 身份验证-发送手机验证码(忘记密码)
	SendPhoneForgotPasswdCode(ctx context.Context, in *resources.SendPhoneVerifyCodeReq, opts ...grpc.CallOption) (*resources.SendVerifyCodeResp, error)
	// 身份验证-发送邮箱验证码(修改密码)
	SendEmailChangePasswdCode(ctx context.Context, in *resources.SendEmailVerifyCodeReq, opts ...grpc.CallOption) (*resources.SendVerifyCodeResp, error)
	// 身份验证-发送手机验证码(修改密码)
	SendPhoneChangePasswdCode(ctx context.Context, in *resources.SendPhoneVerifyCodeReq, opts ...grpc.CallOption) (*resources.SendVerifyCodeResp, error)
	// 身份验证-发送邮箱变更码
	SendEmailChangeCode(ctx context.Context, in *resources.SendEmailVerifyCodeReq, opts ...grpc.CallOption) (*resources.SendVerifyCodeResp, error)
	// 身份验证-发送手机变更码
	SendPhoneChangeCode(ctx context.Context, in *resources.SendPhoneVerifyCodeReq, opts ...grpc.CallOption) (*resources.SendVerifyCodeResp, error)
}

type srvUserAuthV1Client struct {
	cc grpc.ClientConnInterface
}

func NewSrvUserAuthV1Client(cc grpc.ClientConnInterface) SrvUserAuthV1Client {
	return &srvUserAuthV1Client{cc}
}

func (c *srvUserAuthV1Client) Ping(ctx context.Context, in *resources.PingReq, opts ...grpc.CallOption) (*resources.PingResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.PingResp)
	err := c.cc.Invoke(ctx, SrvUserAuthV1_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvUserAuthV1Client) SignupByEmail(ctx context.Context, in *resources.SignupByEmailReq, opts ...grpc.CallOption) (*resources.LoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.LoginResp)
	err := c.cc.Invoke(ctx, SrvUserAuthV1_SignupByEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvUserAuthV1Client) SignupByPhone(ctx context.Context, in *resources.SignupByPhoneReq, opts ...grpc.CallOption) (*resources.LoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.LoginResp)
	err := c.cc.Invoke(ctx, SrvUserAuthV1_SignupByPhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvUserAuthV1Client) LoginOrSignupByPhone(ctx context.Context, in *resources.LoginOrSignupByPhoneReq, opts ...grpc.CallOption) (*resources.LoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.LoginResp)
	err := c.cc.Invoke(ctx, SrvUserAuthV1_LoginOrSignupByPhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvUserAuthV1Client) LoginOrSignupByEmail(ctx context.Context, in *resources.LoginOrSignupByEmailReq, opts ...grpc.CallOption) (*resources.LoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.LoginResp)
	err := c.cc.Invoke(ctx, SrvUserAuthV1_LoginOrSignupByEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvUserAuthV1Client) RefreshToken(ctx context.Context, in *resources.RefreshTokenReq, opts ...grpc.CallOption) (*resources.LoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.LoginResp)
	err := c.cc.Invoke(ctx, SrvUserAuthV1_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvUserAuthV1Client) LoginByEmail(ctx context.Context, in *resources.LoginByEmailReq, opts ...grpc.CallOption) (*resources.LoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.LoginResp)
	err := c.cc.Invoke(ctx, SrvUserAuthV1_LoginByEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvUserAuthV1Client) LoginByPhone(ctx context.Context, in *resources.LoginByPhoneReq, opts ...grpc.CallOption) (*resources.LoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.LoginResp)
	err := c.cc.Invoke(ctx, SrvUserAuthV1_LoginByPhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvUserAuthV1Client) LoginByOpenApi(ctx context.Context, in *resources.LoginByOpenApiReq, opts ...grpc.CallOption) (*resources.LoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.LoginResp)
	err := c.cc.Invoke(ctx, SrvUserAuthV1_LoginByOpenApi_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvUserAuthV1Client) SendPhoneSignupCode(ctx context.Context, in *resources.SendPhoneVerifyCodeReq, opts ...grpc.CallOption) (*resources.SendVerifyCodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.SendVerifyCodeResp)
	err := c.cc.Invoke(ctx, SrvUserAuthV1_SendPhoneSignupCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvUserAuthV1Client) SendEmailSignupCode(ctx context.Context, in *resources.SendEmailVerifyCodeReq, opts ...grpc.CallOption) (*resources.SendVerifyCodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.SendVerifyCodeResp)
	err := c.cc.Invoke(ctx, SrvUserAuthV1_SendEmailSignupCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvUserAuthV1Client) SendPhoneSignupOrLoginCode(ctx context.Context, in *resources.SendPhoneVerifyCodeReq, opts ...grpc.CallOption) (*resources.SendVerifyCodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.SendVerifyCodeResp)
	err := c.cc.Invoke(ctx, SrvUserAuthV1_SendPhoneSignupOrLoginCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvUserAuthV1Client) SendEmailSignupOrLoginCode(ctx context.Context, in *resources.SendEmailVerifyCodeReq, opts ...grpc.CallOption) (*resources.SendVerifyCodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.SendVerifyCodeResp)
	err := c.cc.Invoke(ctx, SrvUserAuthV1_SendEmailSignupOrLoginCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvUserAuthV1Client) SendEmailLoginCode(ctx context.Context, in *resources.SendEmailVerifyCodeReq, opts ...grpc.CallOption) (*resources.SendVerifyCodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.SendVerifyCodeResp)
	err := c.cc.Invoke(ctx, SrvUserAuthV1_SendEmailLoginCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvUserAuthV1Client) SendPhoneLoginCode(ctx context.Context, in *resources.SendPhoneVerifyCodeReq, opts ...grpc.CallOption) (*resources.SendVerifyCodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.SendVerifyCodeResp)
	err := c.cc.Invoke(ctx, SrvUserAuthV1_SendPhoneLoginCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvUserAuthV1Client) SendEmailForgotPasswdCode(ctx context.Context, in *resources.SendEmailVerifyCodeReq, opts ...grpc.CallOption) (*resources.SendVerifyCodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.SendVerifyCodeResp)
	err := c.cc.Invoke(ctx, SrvUserAuthV1_SendEmailForgotPasswdCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvUserAuthV1Client) SendPhoneForgotPasswdCode(ctx context.Context, in *resources.SendPhoneVerifyCodeReq, opts ...grpc.CallOption) (*resources.SendVerifyCodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.SendVerifyCodeResp)
	err := c.cc.Invoke(ctx, SrvUserAuthV1_SendPhoneForgotPasswdCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvUserAuthV1Client) SendEmailChangePasswdCode(ctx context.Context, in *resources.SendEmailVerifyCodeReq, opts ...grpc.CallOption) (*resources.SendVerifyCodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.SendVerifyCodeResp)
	err := c.cc.Invoke(ctx, SrvUserAuthV1_SendEmailChangePasswdCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvUserAuthV1Client) SendPhoneChangePasswdCode(ctx context.Context, in *resources.SendPhoneVerifyCodeReq, opts ...grpc.CallOption) (*resources.SendVerifyCodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.SendVerifyCodeResp)
	err := c.cc.Invoke(ctx, SrvUserAuthV1_SendPhoneChangePasswdCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvUserAuthV1Client) SendEmailChangeCode(ctx context.Context, in *resources.SendEmailVerifyCodeReq, opts ...grpc.CallOption) (*resources.SendVerifyCodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.SendVerifyCodeResp)
	err := c.cc.Invoke(ctx, SrvUserAuthV1_SendEmailChangeCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvUserAuthV1Client) SendPhoneChangeCode(ctx context.Context, in *resources.SendPhoneVerifyCodeReq, opts ...grpc.CallOption) (*resources.SendVerifyCodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.SendVerifyCodeResp)
	err := c.cc.Invoke(ctx, SrvUserAuthV1_SendPhoneChangeCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SrvUserAuthV1Server is the server API for SrvUserAuthV1 service.
// All implementations must embed UnimplementedSrvUserAuthV1Server
// for forward compatibility.
//
// SrvUserAuthV1 User service
type SrvUserAuthV1Server interface {
	// 身份验证-Ping测试
	Ping(context.Context, *resources.PingReq) (*resources.PingResp, error)
	// 身份验证-Email注册
	SignupByEmail(context.Context, *resources.SignupByEmailReq) (*resources.LoginResp, error)
	// 身份验证-手机注册
	SignupByPhone(context.Context, *resources.SignupByPhoneReq) (*resources.LoginResp, error)
	// 身份验证-手机登陆(自动注册)
	LoginOrSignupByPhone(context.Context, *resources.LoginOrSignupByPhoneReq) (*resources.LoginResp, error)
	// 身份验证-邮箱登陆(自动注册)
	LoginOrSignupByEmail(context.Context, *resources.LoginOrSignupByEmailReq) (*resources.LoginResp, error)
	// 身份验证-刷新Token
	RefreshToken(context.Context, *resources.RefreshTokenReq) (*resources.LoginResp, error)
	// 身份验证-Email登录
	LoginByEmail(context.Context, *resources.LoginByEmailReq) (*resources.LoginResp, error)
	// 身份验证-手机登录
	LoginByPhone(context.Context, *resources.LoginByPhoneReq) (*resources.LoginResp, error)
	// 身份验证-开发平台登录
	LoginByOpenApi(context.Context, *resources.LoginByOpenApiReq) (*resources.LoginResp, error)
	// 身份验证-发送手机注册码
	SendPhoneSignupCode(context.Context, *resources.SendPhoneVerifyCodeReq) (*resources.SendVerifyCodeResp, error)
	// 身份验证-发送邮箱注册码
	SendEmailSignupCode(context.Context, *resources.SendEmailVerifyCodeReq) (*resources.SendVerifyCodeResp, error)
	// 身份验证-发送手机注册or登录码
	SendPhoneSignupOrLoginCode(context.Context, *resources.SendPhoneVerifyCodeReq) (*resources.SendVerifyCodeResp, error)
	// 身份验证-发送邮箱注册or登录码
	SendEmailSignupOrLoginCode(context.Context, *resources.SendEmailVerifyCodeReq) (*resources.SendVerifyCodeResp, error)
	// 身份验证-发送邮箱登录码
	SendEmailLoginCode(context.Context, *resources.SendEmailVerifyCodeReq) (*resources.SendVerifyCodeResp, error)
	// 身份验证-发送手机登录码
	SendPhoneLoginCode(context.Context, *resources.SendPhoneVerifyCodeReq) (*resources.SendVerifyCodeResp, error)
	// 身份验证-发送邮箱验证码(忘记密码)
	SendEmailForgotPasswdCode(context.Context, *resources.SendEmailVerifyCodeReq) (*resources.SendVerifyCodeResp, error)
	// 身份验证-发送手机验证码(忘记密码)
	SendPhoneForgotPasswdCode(context.Context, *resources.SendPhoneVerifyCodeReq) (*resources.SendVerifyCodeResp, error)
	// 身份验证-发送邮箱验证码(修改密码)
	SendEmailChangePasswdCode(context.Context, *resources.SendEmailVerifyCodeReq) (*resources.SendVerifyCodeResp, error)
	// 身份验证-发送手机验证码(修改密码)
	SendPhoneChangePasswdCode(context.Context, *resources.SendPhoneVerifyCodeReq) (*resources.SendVerifyCodeResp, error)
	// 身份验证-发送邮箱变更码
	SendEmailChangeCode(context.Context, *resources.SendEmailVerifyCodeReq) (*resources.SendVerifyCodeResp, error)
	// 身份验证-发送手机变更码
	SendPhoneChangeCode(context.Context, *resources.SendPhoneVerifyCodeReq) (*resources.SendVerifyCodeResp, error)
	mustEmbedUnimplementedSrvUserAuthV1Server()
}

// UnimplementedSrvUserAuthV1Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSrvUserAuthV1Server struct{}

func (UnimplementedSrvUserAuthV1Server) Ping(context.Context, *resources.PingReq) (*resources.PingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSrvUserAuthV1Server) SignupByEmail(context.Context, *resources.SignupByEmailReq) (*resources.LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignupByEmail not implemented")
}
func (UnimplementedSrvUserAuthV1Server) SignupByPhone(context.Context, *resources.SignupByPhoneReq) (*resources.LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignupByPhone not implemented")
}
func (UnimplementedSrvUserAuthV1Server) LoginOrSignupByPhone(context.Context, *resources.LoginOrSignupByPhoneReq) (*resources.LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginOrSignupByPhone not implemented")
}
func (UnimplementedSrvUserAuthV1Server) LoginOrSignupByEmail(context.Context, *resources.LoginOrSignupByEmailReq) (*resources.LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginOrSignupByEmail not implemented")
}
func (UnimplementedSrvUserAuthV1Server) RefreshToken(context.Context, *resources.RefreshTokenReq) (*resources.LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedSrvUserAuthV1Server) LoginByEmail(context.Context, *resources.LoginByEmailReq) (*resources.LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByEmail not implemented")
}
func (UnimplementedSrvUserAuthV1Server) LoginByPhone(context.Context, *resources.LoginByPhoneReq) (*resources.LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByPhone not implemented")
}
func (UnimplementedSrvUserAuthV1Server) LoginByOpenApi(context.Context, *resources.LoginByOpenApiReq) (*resources.LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByOpenApi not implemented")
}
func (UnimplementedSrvUserAuthV1Server) SendPhoneSignupCode(context.Context, *resources.SendPhoneVerifyCodeReq) (*resources.SendVerifyCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPhoneSignupCode not implemented")
}
func (UnimplementedSrvUserAuthV1Server) SendEmailSignupCode(context.Context, *resources.SendEmailVerifyCodeReq) (*resources.SendVerifyCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailSignupCode not implemented")
}
func (UnimplementedSrvUserAuthV1Server) SendPhoneSignupOrLoginCode(context.Context, *resources.SendPhoneVerifyCodeReq) (*resources.SendVerifyCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPhoneSignupOrLoginCode not implemented")
}
func (UnimplementedSrvUserAuthV1Server) SendEmailSignupOrLoginCode(context.Context, *resources.SendEmailVerifyCodeReq) (*resources.SendVerifyCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailSignupOrLoginCode not implemented")
}
func (UnimplementedSrvUserAuthV1Server) SendEmailLoginCode(context.Context, *resources.SendEmailVerifyCodeReq) (*resources.SendVerifyCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailLoginCode not implemented")
}
func (UnimplementedSrvUserAuthV1Server) SendPhoneLoginCode(context.Context, *resources.SendPhoneVerifyCodeReq) (*resources.SendVerifyCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPhoneLoginCode not implemented")
}
func (UnimplementedSrvUserAuthV1Server) SendEmailForgotPasswdCode(context.Context, *resources.SendEmailVerifyCodeReq) (*resources.SendVerifyCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailForgotPasswdCode not implemented")
}
func (UnimplementedSrvUserAuthV1Server) SendPhoneForgotPasswdCode(context.Context, *resources.SendPhoneVerifyCodeReq) (*resources.SendVerifyCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPhoneForgotPasswdCode not implemented")
}
func (UnimplementedSrvUserAuthV1Server) SendEmailChangePasswdCode(context.Context, *resources.SendEmailVerifyCodeReq) (*resources.SendVerifyCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailChangePasswdCode not implemented")
}
func (UnimplementedSrvUserAuthV1Server) SendPhoneChangePasswdCode(context.Context, *resources.SendPhoneVerifyCodeReq) (*resources.SendVerifyCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPhoneChangePasswdCode not implemented")
}
func (UnimplementedSrvUserAuthV1Server) SendEmailChangeCode(context.Context, *resources.SendEmailVerifyCodeReq) (*resources.SendVerifyCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailChangeCode not implemented")
}
func (UnimplementedSrvUserAuthV1Server) SendPhoneChangeCode(context.Context, *resources.SendPhoneVerifyCodeReq) (*resources.SendVerifyCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPhoneChangeCode not implemented")
}
func (UnimplementedSrvUserAuthV1Server) mustEmbedUnimplementedSrvUserAuthV1Server() {}
func (UnimplementedSrvUserAuthV1Server) testEmbeddedByValue()                       {}

// UnsafeSrvUserAuthV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SrvUserAuthV1Server will
// result in compilation errors.
type UnsafeSrvUserAuthV1Server interface {
	mustEmbedUnimplementedSrvUserAuthV1Server()
}

func RegisterSrvUserAuthV1Server(s grpc.ServiceRegistrar, srv SrvUserAuthV1Server) {
	// If the following call pancis, it indicates UnimplementedSrvUserAuthV1Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SrvUserAuthV1_ServiceDesc, srv)
}

func _SrvUserAuthV1_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserAuthV1Server).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvUserAuthV1_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserAuthV1Server).Ping(ctx, req.(*resources.PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvUserAuthV1_SignupByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.SignupByEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserAuthV1Server).SignupByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvUserAuthV1_SignupByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserAuthV1Server).SignupByEmail(ctx, req.(*resources.SignupByEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvUserAuthV1_SignupByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.SignupByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserAuthV1Server).SignupByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvUserAuthV1_SignupByPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserAuthV1Server).SignupByPhone(ctx, req.(*resources.SignupByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvUserAuthV1_LoginOrSignupByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.LoginOrSignupByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserAuthV1Server).LoginOrSignupByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvUserAuthV1_LoginOrSignupByPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserAuthV1Server).LoginOrSignupByPhone(ctx, req.(*resources.LoginOrSignupByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvUserAuthV1_LoginOrSignupByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.LoginOrSignupByEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserAuthV1Server).LoginOrSignupByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvUserAuthV1_LoginOrSignupByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserAuthV1Server).LoginOrSignupByEmail(ctx, req.(*resources.LoginOrSignupByEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvUserAuthV1_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.RefreshTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserAuthV1Server).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvUserAuthV1_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserAuthV1Server).RefreshToken(ctx, req.(*resources.RefreshTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvUserAuthV1_LoginByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.LoginByEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserAuthV1Server).LoginByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvUserAuthV1_LoginByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserAuthV1Server).LoginByEmail(ctx, req.(*resources.LoginByEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvUserAuthV1_LoginByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.LoginByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserAuthV1Server).LoginByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvUserAuthV1_LoginByPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserAuthV1Server).LoginByPhone(ctx, req.(*resources.LoginByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvUserAuthV1_LoginByOpenApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.LoginByOpenApiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserAuthV1Server).LoginByOpenApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvUserAuthV1_LoginByOpenApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserAuthV1Server).LoginByOpenApi(ctx, req.(*resources.LoginByOpenApiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvUserAuthV1_SendPhoneSignupCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.SendPhoneVerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserAuthV1Server).SendPhoneSignupCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvUserAuthV1_SendPhoneSignupCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserAuthV1Server).SendPhoneSignupCode(ctx, req.(*resources.SendPhoneVerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvUserAuthV1_SendEmailSignupCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.SendEmailVerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserAuthV1Server).SendEmailSignupCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvUserAuthV1_SendEmailSignupCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserAuthV1Server).SendEmailSignupCode(ctx, req.(*resources.SendEmailVerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvUserAuthV1_SendPhoneSignupOrLoginCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.SendPhoneVerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserAuthV1Server).SendPhoneSignupOrLoginCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvUserAuthV1_SendPhoneSignupOrLoginCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserAuthV1Server).SendPhoneSignupOrLoginCode(ctx, req.(*resources.SendPhoneVerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvUserAuthV1_SendEmailSignupOrLoginCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.SendEmailVerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserAuthV1Server).SendEmailSignupOrLoginCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvUserAuthV1_SendEmailSignupOrLoginCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserAuthV1Server).SendEmailSignupOrLoginCode(ctx, req.(*resources.SendEmailVerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvUserAuthV1_SendEmailLoginCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.SendEmailVerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserAuthV1Server).SendEmailLoginCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvUserAuthV1_SendEmailLoginCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserAuthV1Server).SendEmailLoginCode(ctx, req.(*resources.SendEmailVerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvUserAuthV1_SendPhoneLoginCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.SendPhoneVerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserAuthV1Server).SendPhoneLoginCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvUserAuthV1_SendPhoneLoginCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserAuthV1Server).SendPhoneLoginCode(ctx, req.(*resources.SendPhoneVerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvUserAuthV1_SendEmailForgotPasswdCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.SendEmailVerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserAuthV1Server).SendEmailForgotPasswdCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvUserAuthV1_SendEmailForgotPasswdCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserAuthV1Server).SendEmailForgotPasswdCode(ctx, req.(*resources.SendEmailVerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvUserAuthV1_SendPhoneForgotPasswdCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.SendPhoneVerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserAuthV1Server).SendPhoneForgotPasswdCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvUserAuthV1_SendPhoneForgotPasswdCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserAuthV1Server).SendPhoneForgotPasswdCode(ctx, req.(*resources.SendPhoneVerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvUserAuthV1_SendEmailChangePasswdCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.SendEmailVerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserAuthV1Server).SendEmailChangePasswdCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvUserAuthV1_SendEmailChangePasswdCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserAuthV1Server).SendEmailChangePasswdCode(ctx, req.(*resources.SendEmailVerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvUserAuthV1_SendPhoneChangePasswdCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.SendPhoneVerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserAuthV1Server).SendPhoneChangePasswdCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvUserAuthV1_SendPhoneChangePasswdCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserAuthV1Server).SendPhoneChangePasswdCode(ctx, req.(*resources.SendPhoneVerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvUserAuthV1_SendEmailChangeCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.SendEmailVerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserAuthV1Server).SendEmailChangeCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvUserAuthV1_SendEmailChangeCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserAuthV1Server).SendEmailChangeCode(ctx, req.(*resources.SendEmailVerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvUserAuthV1_SendPhoneChangeCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.SendPhoneVerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUserAuthV1Server).SendPhoneChangeCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvUserAuthV1_SendPhoneChangeCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUserAuthV1Server).SendPhoneChangeCode(ctx, req.(*resources.SendPhoneVerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SrvUserAuthV1_ServiceDesc is the grpc.ServiceDesc for SrvUserAuthV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SrvUserAuthV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "saas.api.account.servicev1.SrvUserAuthV1",
	HandlerType: (*SrvUserAuthV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _SrvUserAuthV1_Ping_Handler,
		},
		{
			MethodName: "SignupByEmail",
			Handler:    _SrvUserAuthV1_SignupByEmail_Handler,
		},
		{
			MethodName: "SignupByPhone",
			Handler:    _SrvUserAuthV1_SignupByPhone_Handler,
		},
		{
			MethodName: "LoginOrSignupByPhone",
			Handler:    _SrvUserAuthV1_LoginOrSignupByPhone_Handler,
		},
		{
			MethodName: "LoginOrSignupByEmail",
			Handler:    _SrvUserAuthV1_LoginOrSignupByEmail_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _SrvUserAuthV1_RefreshToken_Handler,
		},
		{
			MethodName: "LoginByEmail",
			Handler:    _SrvUserAuthV1_LoginByEmail_Handler,
		},
		{
			MethodName: "LoginByPhone",
			Handler:    _SrvUserAuthV1_LoginByPhone_Handler,
		},
		{
			MethodName: "LoginByOpenApi",
			Handler:    _SrvUserAuthV1_LoginByOpenApi_Handler,
		},
		{
			MethodName: "SendPhoneSignupCode",
			Handler:    _SrvUserAuthV1_SendPhoneSignupCode_Handler,
		},
		{
			MethodName: "SendEmailSignupCode",
			Handler:    _SrvUserAuthV1_SendEmailSignupCode_Handler,
		},
		{
			MethodName: "SendPhoneSignupOrLoginCode",
			Handler:    _SrvUserAuthV1_SendPhoneSignupOrLoginCode_Handler,
		},
		{
			MethodName: "SendEmailSignupOrLoginCode",
			Handler:    _SrvUserAuthV1_SendEmailSignupOrLoginCode_Handler,
		},
		{
			MethodName: "SendEmailLoginCode",
			Handler:    _SrvUserAuthV1_SendEmailLoginCode_Handler,
		},
		{
			MethodName: "SendPhoneLoginCode",
			Handler:    _SrvUserAuthV1_SendPhoneLoginCode_Handler,
		},
		{
			MethodName: "SendEmailForgotPasswdCode",
			Handler:    _SrvUserAuthV1_SendEmailForgotPasswdCode_Handler,
		},
		{
			MethodName: "SendPhoneForgotPasswdCode",
			Handler:    _SrvUserAuthV1_SendPhoneForgotPasswdCode_Handler,
		},
		{
			MethodName: "SendEmailChangePasswdCode",
			Handler:    _SrvUserAuthV1_SendEmailChangePasswdCode_Handler,
		},
		{
			MethodName: "SendPhoneChangePasswdCode",
			Handler:    _SrvUserAuthV1_SendPhoneChangePasswdCode_Handler,
		},
		{
			MethodName: "SendEmailChangeCode",
			Handler:    _SrvUserAuthV1_SendEmailChangeCode_Handler,
		},
		{
			MethodName: "SendPhoneChangeCode",
			Handler:    _SrvUserAuthV1_SendPhoneChangeCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/account-service/v1/services/user_auth.service.v1.proto",
}
