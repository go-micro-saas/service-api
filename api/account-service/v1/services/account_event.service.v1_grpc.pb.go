// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: api/account-service/v1/services/account_event.service.v1.proto

package servicev1

import (
	context "context"
	resources "github.com/go-micro-saas/service-api/api/account-service/v1/resources"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SrvAccountEventV1_Ping_FullMethodName                        = "/saas.api.account.servicev1.SrvAccountEventV1/Ping"
	SrvAccountEventV1_SubscribeSendEmailCodeEvent_FullMethodName = "/saas.api.account.servicev1.SrvAccountEventV1/SubscribeSendEmailCodeEvent"
	SrvAccountEventV1_StopSendEmailCodedEvent_FullMethodName     = "/saas.api.account.servicev1.SrvAccountEventV1/StopSendEmailCodedEvent"
)

// SrvAccountEventV1Client is the client API for SrvAccountEventV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SrvAccountEventV1 User service
type SrvAccountEventV1Client interface {
	// 身份验证-Ping测试
	Ping(ctx context.Context, in *resources.PingReq, opts ...grpc.CallOption) (*resources.PingResp, error)
	// 身份验证 - 订阅发送邮件验证码事件
	SubscribeSendEmailCodeEvent(ctx context.Context, in *resources.SubscribeSendEmailCodeEventReq, opts ...grpc.CallOption) (*resources.SubscribeSendEmailCodeEventResp, error)
	// 身份验证 - 停止发送邮件验证码事件
	StopSendEmailCodedEvent(ctx context.Context, in *resources.StopSendEmailCodeEventReq, opts ...grpc.CallOption) (*resources.StopSendEmailCodeEventResp, error)
}

type srvAccountEventV1Client struct {
	cc grpc.ClientConnInterface
}

func NewSrvAccountEventV1Client(cc grpc.ClientConnInterface) SrvAccountEventV1Client {
	return &srvAccountEventV1Client{cc}
}

func (c *srvAccountEventV1Client) Ping(ctx context.Context, in *resources.PingReq, opts ...grpc.CallOption) (*resources.PingResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.PingResp)
	err := c.cc.Invoke(ctx, SrvAccountEventV1_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvAccountEventV1Client) SubscribeSendEmailCodeEvent(ctx context.Context, in *resources.SubscribeSendEmailCodeEventReq, opts ...grpc.CallOption) (*resources.SubscribeSendEmailCodeEventResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.SubscribeSendEmailCodeEventResp)
	err := c.cc.Invoke(ctx, SrvAccountEventV1_SubscribeSendEmailCodeEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvAccountEventV1Client) StopSendEmailCodedEvent(ctx context.Context, in *resources.StopSendEmailCodeEventReq, opts ...grpc.CallOption) (*resources.StopSendEmailCodeEventResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(resources.StopSendEmailCodeEventResp)
	err := c.cc.Invoke(ctx, SrvAccountEventV1_StopSendEmailCodedEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SrvAccountEventV1Server is the server API for SrvAccountEventV1 service.
// All implementations must embed UnimplementedSrvAccountEventV1Server
// for forward compatibility.
//
// SrvAccountEventV1 User service
type SrvAccountEventV1Server interface {
	// 身份验证-Ping测试
	Ping(context.Context, *resources.PingReq) (*resources.PingResp, error)
	// 身份验证 - 订阅发送邮件验证码事件
	SubscribeSendEmailCodeEvent(context.Context, *resources.SubscribeSendEmailCodeEventReq) (*resources.SubscribeSendEmailCodeEventResp, error)
	// 身份验证 - 停止发送邮件验证码事件
	StopSendEmailCodedEvent(context.Context, *resources.StopSendEmailCodeEventReq) (*resources.StopSendEmailCodeEventResp, error)
	mustEmbedUnimplementedSrvAccountEventV1Server()
}

// UnimplementedSrvAccountEventV1Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSrvAccountEventV1Server struct{}

func (UnimplementedSrvAccountEventV1Server) Ping(context.Context, *resources.PingReq) (*resources.PingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSrvAccountEventV1Server) SubscribeSendEmailCodeEvent(context.Context, *resources.SubscribeSendEmailCodeEventReq) (*resources.SubscribeSendEmailCodeEventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeSendEmailCodeEvent not implemented")
}
func (UnimplementedSrvAccountEventV1Server) StopSendEmailCodedEvent(context.Context, *resources.StopSendEmailCodeEventReq) (*resources.StopSendEmailCodeEventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSendEmailCodedEvent not implemented")
}
func (UnimplementedSrvAccountEventV1Server) mustEmbedUnimplementedSrvAccountEventV1Server() {}
func (UnimplementedSrvAccountEventV1Server) testEmbeddedByValue()                           {}

// UnsafeSrvAccountEventV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SrvAccountEventV1Server will
// result in compilation errors.
type UnsafeSrvAccountEventV1Server interface {
	mustEmbedUnimplementedSrvAccountEventV1Server()
}

func RegisterSrvAccountEventV1Server(s grpc.ServiceRegistrar, srv SrvAccountEventV1Server) {
	// If the following call pancis, it indicates UnimplementedSrvAccountEventV1Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SrvAccountEventV1_ServiceDesc, srv)
}

func _SrvAccountEventV1_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvAccountEventV1Server).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvAccountEventV1_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvAccountEventV1Server).Ping(ctx, req.(*resources.PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvAccountEventV1_SubscribeSendEmailCodeEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.SubscribeSendEmailCodeEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvAccountEventV1Server).SubscribeSendEmailCodeEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvAccountEventV1_SubscribeSendEmailCodeEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvAccountEventV1Server).SubscribeSendEmailCodeEvent(ctx, req.(*resources.SubscribeSendEmailCodeEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvAccountEventV1_StopSendEmailCodedEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.StopSendEmailCodeEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvAccountEventV1Server).StopSendEmailCodedEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvAccountEventV1_StopSendEmailCodedEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvAccountEventV1Server).StopSendEmailCodedEvent(ctx, req.(*resources.StopSendEmailCodeEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SrvAccountEventV1_ServiceDesc is the grpc.ServiceDesc for SrvAccountEventV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SrvAccountEventV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "saas.api.account.servicev1.SrvAccountEventV1",
	HandlerType: (*SrvAccountEventV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _SrvAccountEventV1_Ping_Handler,
		},
		{
			MethodName: "SubscribeSendEmailCodeEvent",
			Handler:    _SrvAccountEventV1_SubscribeSendEmailCodeEvent_Handler,
		},
		{
			MethodName: "StopSendEmailCodedEvent",
			Handler:    _SrvAccountEventV1_StopSendEmailCodedEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/account-service/v1/services/account_event.service.v1.proto",
}
