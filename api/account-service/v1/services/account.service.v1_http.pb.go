// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.30.2
// source: api/account-service/v1/services/account.service.v1.proto

package servicev1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	resources "github.com/go-micro-saas/service-api/api/account-service/v1/resources"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSrvAccountV1CreateOrGetUserByEmail = "/saas.api.account.servicev1.SrvAccountV1/CreateOrGetUserByEmail"
const OperationSrvAccountV1CreateOrGetUserByPhone = "/saas.api.account.servicev1.SrvAccountV1/CreateOrGetUserByPhone"
const OperationSrvAccountV1CreateUser = "/saas.api.account.servicev1.SrvAccountV1/CreateUser"
const OperationSrvAccountV1CreateUserByEmail = "/saas.api.account.servicev1.SrvAccountV1/CreateUserByEmail"
const OperationSrvAccountV1CreateUserByPhone = "/saas.api.account.servicev1.SrvAccountV1/CreateUserByPhone"
const OperationSrvAccountV1GetUserInfo = "/saas.api.account.servicev1.SrvAccountV1/GetUserInfo"
const OperationSrvAccountV1GetUserInfoList = "/saas.api.account.servicev1.SrvAccountV1/GetUserInfoList"
const OperationSrvAccountV1GetUserList = "/saas.api.account.servicev1.SrvAccountV1/GetUserList"
const OperationSrvAccountV1Ping = "/saas.api.account.servicev1.SrvAccountV1/Ping"

type SrvAccountV1HTTPServer interface {
	// CreateOrGetUserByEmail 账户-创建or获取用户by邮箱
	CreateOrGetUserByEmail(context.Context, *resources.CreateUserByEmailReq) (*resources.CreateOrGetUserResp, error)
	// CreateOrGetUserByPhone 账户-创建or获取用户by手机
	CreateOrGetUserByPhone(context.Context, *resources.CreateUserByPhoneReq) (*resources.CreateOrGetUserResp, error)
	// CreateUser 账户-创建用户
	CreateUser(context.Context, *resources.CreateUserReq) (*resources.CreateUserResp, error)
	// CreateUserByEmail 账户-创建用户by邮箱
	CreateUserByEmail(context.Context, *resources.CreateUserByEmailReq) (*resources.CreateUserResp, error)
	// CreateUserByPhone 账户-创建用户by手机
	CreateUserByPhone(context.Context, *resources.CreateUserByPhoneReq) (*resources.CreateUserResp, error)
	// GetUserInfo 账户-获取用户信息
	GetUserInfo(context.Context, *resources.GetUserInfoReq) (*resources.GetUserInfoResp, error)
	// GetUserInfoList 账户-获取用户信息列表
	GetUserInfoList(context.Context, *resources.GetUserInfoListReq) (*resources.GetUserInfoListResp, error)
	// GetUserList 账户-获取用户列表
	GetUserList(context.Context, *resources.UserListReq) (*resources.UserListResp, error)
	// Ping 账户-Ping测试
	Ping(context.Context, *resources.PingReq) (*resources.PingResp, error)
}

func RegisterSrvAccountV1HTTPServer(s *http.Server, srv SrvAccountV1HTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/account/user/ping", _SrvAccountV1_Ping0_HTTP_Handler(srv))
	r.GET("/api/v1/account/user/info", _SrvAccountV1_GetUserInfo0_HTTP_Handler(srv))
	r.POST("/api/v1/account/user/info-list", _SrvAccountV1_GetUserInfoList0_HTTP_Handler(srv))
	r.POST("/api/v1/account/user/list", _SrvAccountV1_GetUserList0_HTTP_Handler(srv))
	r.POST("/api/v1/account/user/create", _SrvAccountV1_CreateUser0_HTTP_Handler(srv))
	r.POST("/api/v1/account/user/create-by-phone", _SrvAccountV1_CreateUserByPhone0_HTTP_Handler(srv))
	r.POST("/api/v1/account/user/create-by-email", _SrvAccountV1_CreateUserByEmail0_HTTP_Handler(srv))
	r.POST("/api/v1/account/user/create-or-get-by-phone", _SrvAccountV1_CreateOrGetUserByPhone0_HTTP_Handler(srv))
	r.POST("/api/v1/account/user/create-or-get-by-email", _SrvAccountV1_CreateOrGetUserByEmail0_HTTP_Handler(srv))
}

func _SrvAccountV1_Ping0_HTTP_Handler(srv SrvAccountV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.PingReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvAccountV1Ping)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Ping(ctx, req.(*resources.PingReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.PingResp)
		return ctx.Result(200, reply)
	}
}

func _SrvAccountV1_GetUserInfo0_HTTP_Handler(srv SrvAccountV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.GetUserInfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvAccountV1GetUserInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserInfo(ctx, req.(*resources.GetUserInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.GetUserInfoResp)
		return ctx.Result(200, reply)
	}
}

func _SrvAccountV1_GetUserInfoList0_HTTP_Handler(srv SrvAccountV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.GetUserInfoListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvAccountV1GetUserInfoList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserInfoList(ctx, req.(*resources.GetUserInfoListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.GetUserInfoListResp)
		return ctx.Result(200, reply)
	}
}

func _SrvAccountV1_GetUserList0_HTTP_Handler(srv SrvAccountV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.UserListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvAccountV1GetUserList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserList(ctx, req.(*resources.UserListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.UserListResp)
		return ctx.Result(200, reply)
	}
}

func _SrvAccountV1_CreateUser0_HTTP_Handler(srv SrvAccountV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.CreateUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvAccountV1CreateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUser(ctx, req.(*resources.CreateUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.CreateUserResp)
		return ctx.Result(200, reply)
	}
}

func _SrvAccountV1_CreateUserByPhone0_HTTP_Handler(srv SrvAccountV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.CreateUserByPhoneReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvAccountV1CreateUserByPhone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUserByPhone(ctx, req.(*resources.CreateUserByPhoneReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.CreateUserResp)
		return ctx.Result(200, reply)
	}
}

func _SrvAccountV1_CreateUserByEmail0_HTTP_Handler(srv SrvAccountV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.CreateUserByEmailReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvAccountV1CreateUserByEmail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUserByEmail(ctx, req.(*resources.CreateUserByEmailReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.CreateUserResp)
		return ctx.Result(200, reply)
	}
}

func _SrvAccountV1_CreateOrGetUserByPhone0_HTTP_Handler(srv SrvAccountV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.CreateUserByPhoneReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvAccountV1CreateOrGetUserByPhone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrGetUserByPhone(ctx, req.(*resources.CreateUserByPhoneReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.CreateOrGetUserResp)
		return ctx.Result(200, reply)
	}
}

func _SrvAccountV1_CreateOrGetUserByEmail0_HTTP_Handler(srv SrvAccountV1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in resources.CreateUserByEmailReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSrvAccountV1CreateOrGetUserByEmail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrGetUserByEmail(ctx, req.(*resources.CreateUserByEmailReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*resources.CreateOrGetUserResp)
		return ctx.Result(200, reply)
	}
}

type SrvAccountV1HTTPClient interface {
	CreateOrGetUserByEmail(ctx context.Context, req *resources.CreateUserByEmailReq, opts ...http.CallOption) (rsp *resources.CreateOrGetUserResp, err error)
	CreateOrGetUserByPhone(ctx context.Context, req *resources.CreateUserByPhoneReq, opts ...http.CallOption) (rsp *resources.CreateOrGetUserResp, err error)
	CreateUser(ctx context.Context, req *resources.CreateUserReq, opts ...http.CallOption) (rsp *resources.CreateUserResp, err error)
	CreateUserByEmail(ctx context.Context, req *resources.CreateUserByEmailReq, opts ...http.CallOption) (rsp *resources.CreateUserResp, err error)
	CreateUserByPhone(ctx context.Context, req *resources.CreateUserByPhoneReq, opts ...http.CallOption) (rsp *resources.CreateUserResp, err error)
	GetUserInfo(ctx context.Context, req *resources.GetUserInfoReq, opts ...http.CallOption) (rsp *resources.GetUserInfoResp, err error)
	GetUserInfoList(ctx context.Context, req *resources.GetUserInfoListReq, opts ...http.CallOption) (rsp *resources.GetUserInfoListResp, err error)
	GetUserList(ctx context.Context, req *resources.UserListReq, opts ...http.CallOption) (rsp *resources.UserListResp, err error)
	Ping(ctx context.Context, req *resources.PingReq, opts ...http.CallOption) (rsp *resources.PingResp, err error)
}

type SrvAccountV1HTTPClientImpl struct {
	cc *http.Client
}

func NewSrvAccountV1HTTPClient(client *http.Client) SrvAccountV1HTTPClient {
	return &SrvAccountV1HTTPClientImpl{client}
}

func (c *SrvAccountV1HTTPClientImpl) CreateOrGetUserByEmail(ctx context.Context, in *resources.CreateUserByEmailReq, opts ...http.CallOption) (*resources.CreateOrGetUserResp, error) {
	var out resources.CreateOrGetUserResp
	pattern := "/api/v1/account/user/create-or-get-by-email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvAccountV1CreateOrGetUserByEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SrvAccountV1HTTPClientImpl) CreateOrGetUserByPhone(ctx context.Context, in *resources.CreateUserByPhoneReq, opts ...http.CallOption) (*resources.CreateOrGetUserResp, error) {
	var out resources.CreateOrGetUserResp
	pattern := "/api/v1/account/user/create-or-get-by-phone"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvAccountV1CreateOrGetUserByPhone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SrvAccountV1HTTPClientImpl) CreateUser(ctx context.Context, in *resources.CreateUserReq, opts ...http.CallOption) (*resources.CreateUserResp, error) {
	var out resources.CreateUserResp
	pattern := "/api/v1/account/user/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvAccountV1CreateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SrvAccountV1HTTPClientImpl) CreateUserByEmail(ctx context.Context, in *resources.CreateUserByEmailReq, opts ...http.CallOption) (*resources.CreateUserResp, error) {
	var out resources.CreateUserResp
	pattern := "/api/v1/account/user/create-by-email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvAccountV1CreateUserByEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SrvAccountV1HTTPClientImpl) CreateUserByPhone(ctx context.Context, in *resources.CreateUserByPhoneReq, opts ...http.CallOption) (*resources.CreateUserResp, error) {
	var out resources.CreateUserResp
	pattern := "/api/v1/account/user/create-by-phone"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvAccountV1CreateUserByPhone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SrvAccountV1HTTPClientImpl) GetUserInfo(ctx context.Context, in *resources.GetUserInfoReq, opts ...http.CallOption) (*resources.GetUserInfoResp, error) {
	var out resources.GetUserInfoResp
	pattern := "/api/v1/account/user/info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSrvAccountV1GetUserInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SrvAccountV1HTTPClientImpl) GetUserInfoList(ctx context.Context, in *resources.GetUserInfoListReq, opts ...http.CallOption) (*resources.GetUserInfoListResp, error) {
	var out resources.GetUserInfoListResp
	pattern := "/api/v1/account/user/info-list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvAccountV1GetUserInfoList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SrvAccountV1HTTPClientImpl) GetUserList(ctx context.Context, in *resources.UserListReq, opts ...http.CallOption) (*resources.UserListResp, error) {
	var out resources.UserListResp
	pattern := "/api/v1/account/user/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSrvAccountV1GetUserList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SrvAccountV1HTTPClientImpl) Ping(ctx context.Context, in *resources.PingReq, opts ...http.CallOption) (*resources.PingResp, error) {
	var out resources.PingResp
	pattern := "/api/v1/account/user/ping"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSrvAccountV1Ping))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
