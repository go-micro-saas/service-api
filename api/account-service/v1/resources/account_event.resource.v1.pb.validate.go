// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/account-service/v1/resources/account_event.resource.v1.proto

package resourcev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SubscribeSendEmailCodeEventReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscribeSendEmailCodeEventReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeSendEmailCodeEventReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SubscribeSendEmailCodeEventReqMultiError, or nil if none found.
func (m *SubscribeSendEmailCodeEventReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeSendEmailCodeEventReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SubscribeSendEmailCodeEventReqMultiError(errors)
	}

	return nil
}

// SubscribeSendEmailCodeEventReqMultiError is an error wrapping multiple
// validation errors returned by SubscribeSendEmailCodeEventReq.ValidateAll()
// if the designated constraints aren't met.
type SubscribeSendEmailCodeEventReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeSendEmailCodeEventReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeSendEmailCodeEventReqMultiError) AllErrors() []error { return m }

// SubscribeSendEmailCodeEventReqValidationError is the validation error
// returned by SubscribeSendEmailCodeEventReq.Validate if the designated
// constraints aren't met.
type SubscribeSendEmailCodeEventReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeSendEmailCodeEventReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeSendEmailCodeEventReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeSendEmailCodeEventReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeSendEmailCodeEventReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeSendEmailCodeEventReqValidationError) ErrorName() string {
	return "SubscribeSendEmailCodeEventReqValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeSendEmailCodeEventReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeSendEmailCodeEventReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeSendEmailCodeEventReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeSendEmailCodeEventReqValidationError{}

// Validate checks the field values on SubscribeSendEmailCodeEventResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscribeSendEmailCodeEventResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeSendEmailCodeEventResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SubscribeSendEmailCodeEventRespMultiError, or nil if none found.
func (m *SubscribeSendEmailCodeEventResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeSendEmailCodeEventResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubscribeSendEmailCodeEventRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubscribeSendEmailCodeEventRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscribeSendEmailCodeEventRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubscribeSendEmailCodeEventRespMultiError(errors)
	}

	return nil
}

// SubscribeSendEmailCodeEventRespMultiError is an error wrapping multiple
// validation errors returned by SubscribeSendEmailCodeEventResp.ValidateAll()
// if the designated constraints aren't met.
type SubscribeSendEmailCodeEventRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeSendEmailCodeEventRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeSendEmailCodeEventRespMultiError) AllErrors() []error { return m }

// SubscribeSendEmailCodeEventRespValidationError is the validation error
// returned by SubscribeSendEmailCodeEventResp.Validate if the designated
// constraints aren't met.
type SubscribeSendEmailCodeEventRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeSendEmailCodeEventRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeSendEmailCodeEventRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeSendEmailCodeEventRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeSendEmailCodeEventRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeSendEmailCodeEventRespValidationError) ErrorName() string {
	return "SubscribeSendEmailCodeEventRespValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeSendEmailCodeEventRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeSendEmailCodeEventResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeSendEmailCodeEventRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeSendEmailCodeEventRespValidationError{}

// Validate checks the field values on SubscribeSendEmailCodeEventRespData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SubscribeSendEmailCodeEventRespData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeSendEmailCodeEventRespData
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SubscribeSendEmailCodeEventRespDataMultiError, or nil if none found.
func (m *SubscribeSendEmailCodeEventRespData) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeSendEmailCodeEventRespData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConsumerCounter

	if len(errors) > 0 {
		return SubscribeSendEmailCodeEventRespDataMultiError(errors)
	}

	return nil
}

// SubscribeSendEmailCodeEventRespDataMultiError is an error wrapping multiple
// validation errors returned by
// SubscribeSendEmailCodeEventRespData.ValidateAll() if the designated
// constraints aren't met.
type SubscribeSendEmailCodeEventRespDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeSendEmailCodeEventRespDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeSendEmailCodeEventRespDataMultiError) AllErrors() []error { return m }

// SubscribeSendEmailCodeEventRespDataValidationError is the validation error
// returned by SubscribeSendEmailCodeEventRespData.Validate if the designated
// constraints aren't met.
type SubscribeSendEmailCodeEventRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeSendEmailCodeEventRespDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeSendEmailCodeEventRespDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeSendEmailCodeEventRespDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeSendEmailCodeEventRespDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeSendEmailCodeEventRespDataValidationError) ErrorName() string {
	return "SubscribeSendEmailCodeEventRespDataValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeSendEmailCodeEventRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeSendEmailCodeEventRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeSendEmailCodeEventRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeSendEmailCodeEventRespDataValidationError{}

// Validate checks the field values on StopSendEmailCodeEventReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopSendEmailCodeEventReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopSendEmailCodeEventReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopSendEmailCodeEventReqMultiError, or nil if none found.
func (m *StopSendEmailCodeEventReq) ValidateAll() error {
	return m.validate(true)
}

func (m *StopSendEmailCodeEventReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StopSendEmailCodeEventReqMultiError(errors)
	}

	return nil
}

// StopSendEmailCodeEventReqMultiError is an error wrapping multiple validation
// errors returned by StopSendEmailCodeEventReq.ValidateAll() if the
// designated constraints aren't met.
type StopSendEmailCodeEventReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopSendEmailCodeEventReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopSendEmailCodeEventReqMultiError) AllErrors() []error { return m }

// StopSendEmailCodeEventReqValidationError is the validation error returned by
// StopSendEmailCodeEventReq.Validate if the designated constraints aren't met.
type StopSendEmailCodeEventReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopSendEmailCodeEventReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopSendEmailCodeEventReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopSendEmailCodeEventReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopSendEmailCodeEventReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopSendEmailCodeEventReqValidationError) ErrorName() string {
	return "StopSendEmailCodeEventReqValidationError"
}

// Error satisfies the builtin error interface
func (e StopSendEmailCodeEventReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopSendEmailCodeEventReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopSendEmailCodeEventReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopSendEmailCodeEventReqValidationError{}

// Validate checks the field values on StopSendEmailCodeEventResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopSendEmailCodeEventResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopSendEmailCodeEventResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopSendEmailCodeEventRespMultiError, or nil if none found.
func (m *StopSendEmailCodeEventResp) ValidateAll() error {
	return m.validate(true)
}

func (m *StopSendEmailCodeEventResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StopSendEmailCodeEventRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StopSendEmailCodeEventRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StopSendEmailCodeEventRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StopSendEmailCodeEventRespMultiError(errors)
	}

	return nil
}

// StopSendEmailCodeEventRespMultiError is an error wrapping multiple
// validation errors returned by StopSendEmailCodeEventResp.ValidateAll() if
// the designated constraints aren't met.
type StopSendEmailCodeEventRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopSendEmailCodeEventRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopSendEmailCodeEventRespMultiError) AllErrors() []error { return m }

// StopSendEmailCodeEventRespValidationError is the validation error returned
// by StopSendEmailCodeEventResp.Validate if the designated constraints aren't met.
type StopSendEmailCodeEventRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopSendEmailCodeEventRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopSendEmailCodeEventRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopSendEmailCodeEventRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopSendEmailCodeEventRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopSendEmailCodeEventRespValidationError) ErrorName() string {
	return "StopSendEmailCodeEventRespValidationError"
}

// Error satisfies the builtin error interface
func (e StopSendEmailCodeEventRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopSendEmailCodeEventResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopSendEmailCodeEventRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopSendEmailCodeEventRespValidationError{}

// Validate checks the field values on StopSendEmailCodeEventRespData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopSendEmailCodeEventRespData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopSendEmailCodeEventRespData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StopSendEmailCodeEventRespDataMultiError, or nil if none found.
func (m *StopSendEmailCodeEventRespData) ValidateAll() error {
	return m.validate(true)
}

func (m *StopSendEmailCodeEventRespData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConsumerCounter

	if len(errors) > 0 {
		return StopSendEmailCodeEventRespDataMultiError(errors)
	}

	return nil
}

// StopSendEmailCodeEventRespDataMultiError is an error wrapping multiple
// validation errors returned by StopSendEmailCodeEventRespData.ValidateAll()
// if the designated constraints aren't met.
type StopSendEmailCodeEventRespDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopSendEmailCodeEventRespDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopSendEmailCodeEventRespDataMultiError) AllErrors() []error { return m }

// StopSendEmailCodeEventRespDataValidationError is the validation error
// returned by StopSendEmailCodeEventRespData.Validate if the designated
// constraints aren't met.
type StopSendEmailCodeEventRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopSendEmailCodeEventRespDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopSendEmailCodeEventRespDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopSendEmailCodeEventRespDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopSendEmailCodeEventRespDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopSendEmailCodeEventRespDataValidationError) ErrorName() string {
	return "StopSendEmailCodeEventRespDataValidationError"
}

// Error satisfies the builtin error interface
func (e StopSendEmailCodeEventRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopSendEmailCodeEventRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopSendEmailCodeEventRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopSendEmailCodeEventRespDataValidationError{}
