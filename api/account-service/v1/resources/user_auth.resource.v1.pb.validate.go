// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/account-service/v1/resources/user_auth.resource.v1.proto

package resourcev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	enumv1 "github.com/go-micro-saas/service-api/api/account-service/v1/enums"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = enumv1.UserGenderEnum_UserGender(0)
)

// Validate checks the field values on PingReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PingReqMultiError, or nil if none found.
func (m *PingReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PingReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return PingReqMultiError(errors)
	}

	return nil
}

// PingReqMultiError is an error wrapping multiple validation errors returned
// by PingReq.ValidateAll() if the designated constraints aren't met.
type PingReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingReqMultiError) AllErrors() []error { return m }

// PingReqValidationError is the validation error returned by PingReq.Validate
// if the designated constraints aren't met.
type PingReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingReqValidationError) ErrorName() string { return "PingReqValidationError" }

// Error satisfies the builtin error interface
func (e PingReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingReqValidationError{}

// Validate checks the field values on PingResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingRespMultiError, or nil
// if none found.
func (m *PingResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PingResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PingRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PingRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PingRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PingRespMultiError(errors)
	}

	return nil
}

// PingRespMultiError is an error wrapping multiple validation errors returned
// by PingResp.ValidateAll() if the designated constraints aren't met.
type PingRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingRespMultiError) AllErrors() []error { return m }

// PingRespValidationError is the validation error returned by
// PingResp.Validate if the designated constraints aren't met.
type PingRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingRespValidationError) ErrorName() string { return "PingRespValidationError" }

// Error satisfies the builtin error interface
func (e PingRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingRespValidationError{}

// Validate checks the field values on PingRespData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingRespData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingRespData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingRespDataMultiError, or
// nil if none found.
func (m *PingRespData) ValidateAll() error {
	return m.validate(true)
}

func (m *PingRespData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return PingRespDataMultiError(errors)
	}

	return nil
}

// PingRespDataMultiError is an error wrapping multiple validation errors
// returned by PingRespData.ValidateAll() if the designated constraints aren't met.
type PingRespDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingRespDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingRespDataMultiError) AllErrors() []error { return m }

// PingRespDataValidationError is the validation error returned by
// PingRespData.Validate if the designated constraints aren't met.
type PingRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingRespDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingRespDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingRespDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingRespDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingRespDataValidationError) ErrorName() string { return "PingRespDataValidationError" }

// Error satisfies the builtin error interface
func (e PingRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingRespDataValidationError{}

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoMultiError, or nil
// if none found.
func (m *UserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for UserNickname

	// no validation rules for UserAvatar

	if len(errors) > 0 {
		return UserInfoMultiError(errors)
	}

	return nil
}

// UserInfoMultiError is an error wrapping multiple validation errors returned
// by UserInfo.ValidateAll() if the designated constraints aren't met.
type UserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoMultiError) AllErrors() []error { return m }

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}

// Validate checks the field values on LoginOrSignupByPhoneReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginOrSignupByPhoneReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginOrSignupByPhoneReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginOrSignupByPhoneReqMultiError, or nil if none found.
func (m *LoginOrSignupByPhoneReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginOrSignupByPhoneReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_LoginOrSignupByPhoneReq_Phone_Pattern.MatchString(m.GetPhone()) {
		err := LoginOrSignupByPhoneReqValidationError{
			field:  "Phone",
			reason: "value does not match regex pattern \"^1[1-9]\\\\d{9}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCode()) > 1024 {
		err := LoginOrSignupByPhoneReqValidationError{
			field:  "Code",
			reason: "value length must be at most 1024 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginOrSignupByPhoneReqMultiError(errors)
	}

	return nil
}

// LoginOrSignupByPhoneReqMultiError is an error wrapping multiple validation
// errors returned by LoginOrSignupByPhoneReq.ValidateAll() if the designated
// constraints aren't met.
type LoginOrSignupByPhoneReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginOrSignupByPhoneReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginOrSignupByPhoneReqMultiError) AllErrors() []error { return m }

// LoginOrSignupByPhoneReqValidationError is the validation error returned by
// LoginOrSignupByPhoneReq.Validate if the designated constraints aren't met.
type LoginOrSignupByPhoneReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginOrSignupByPhoneReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginOrSignupByPhoneReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginOrSignupByPhoneReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginOrSignupByPhoneReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginOrSignupByPhoneReqValidationError) ErrorName() string {
	return "LoginOrSignupByPhoneReqValidationError"
}

// Error satisfies the builtin error interface
func (e LoginOrSignupByPhoneReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginOrSignupByPhoneReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginOrSignupByPhoneReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginOrSignupByPhoneReqValidationError{}

var _LoginOrSignupByPhoneReq_Phone_Pattern = regexp.MustCompile("^1[1-9]\\d{9}$")

// Validate checks the field values on LoginOrSignupByEmailReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginOrSignupByEmailReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginOrSignupByEmailReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginOrSignupByEmailReqMultiError, or nil if none found.
func (m *LoginOrSignupByEmailReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginOrSignupByEmailReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = LoginOrSignupByEmailReqValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCode()) > 1024 {
		err := LoginOrSignupByEmailReqValidationError{
			field:  "Code",
			reason: "value length must be at most 1024 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginOrSignupByEmailReqMultiError(errors)
	}

	return nil
}

func (m *LoginOrSignupByEmailReq) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *LoginOrSignupByEmailReq) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// LoginOrSignupByEmailReqMultiError is an error wrapping multiple validation
// errors returned by LoginOrSignupByEmailReq.ValidateAll() if the designated
// constraints aren't met.
type LoginOrSignupByEmailReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginOrSignupByEmailReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginOrSignupByEmailReqMultiError) AllErrors() []error { return m }

// LoginOrSignupByEmailReqValidationError is the validation error returned by
// LoginOrSignupByEmailReq.Validate if the designated constraints aren't met.
type LoginOrSignupByEmailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginOrSignupByEmailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginOrSignupByEmailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginOrSignupByEmailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginOrSignupByEmailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginOrSignupByEmailReqValidationError) ErrorName() string {
	return "LoginOrSignupByEmailReqValidationError"
}

// Error satisfies the builtin error interface
func (e LoginOrSignupByEmailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginOrSignupByEmailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginOrSignupByEmailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginOrSignupByEmailReqValidationError{}

// Validate checks the field values on SendEmailVerifyCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendEmailVerifyCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendEmailVerifyCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendEmailVerifyCodeReqMultiError, or nil if none found.
func (m *SendEmailVerifyCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendEmailVerifyCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = SendEmailVerifyCodeReqValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendEmailVerifyCodeReqMultiError(errors)
	}

	return nil
}

func (m *SendEmailVerifyCodeReq) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *SendEmailVerifyCodeReq) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// SendEmailVerifyCodeReqMultiError is an error wrapping multiple validation
// errors returned by SendEmailVerifyCodeReq.ValidateAll() if the designated
// constraints aren't met.
type SendEmailVerifyCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendEmailVerifyCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendEmailVerifyCodeReqMultiError) AllErrors() []error { return m }

// SendEmailVerifyCodeReqValidationError is the validation error returned by
// SendEmailVerifyCodeReq.Validate if the designated constraints aren't met.
type SendEmailVerifyCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendEmailVerifyCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendEmailVerifyCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendEmailVerifyCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendEmailVerifyCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendEmailVerifyCodeReqValidationError) ErrorName() string {
	return "SendEmailVerifyCodeReqValidationError"
}

// Error satisfies the builtin error interface
func (e SendEmailVerifyCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendEmailVerifyCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendEmailVerifyCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendEmailVerifyCodeReqValidationError{}

// Validate checks the field values on SendPhoneVerifyCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendPhoneVerifyCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendPhoneVerifyCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendPhoneVerifyCodeReqMultiError, or nil if none found.
func (m *SendPhoneVerifyCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendPhoneVerifyCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_SendPhoneVerifyCodeReq_Phone_Pattern.MatchString(m.GetPhone()) {
		err := SendPhoneVerifyCodeReqValidationError{
			field:  "Phone",
			reason: "value does not match regex pattern \"^1[1-9]\\\\d{9}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendPhoneVerifyCodeReqMultiError(errors)
	}

	return nil
}

// SendPhoneVerifyCodeReqMultiError is an error wrapping multiple validation
// errors returned by SendPhoneVerifyCodeReq.ValidateAll() if the designated
// constraints aren't met.
type SendPhoneVerifyCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendPhoneVerifyCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendPhoneVerifyCodeReqMultiError) AllErrors() []error { return m }

// SendPhoneVerifyCodeReqValidationError is the validation error returned by
// SendPhoneVerifyCodeReq.Validate if the designated constraints aren't met.
type SendPhoneVerifyCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendPhoneVerifyCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendPhoneVerifyCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendPhoneVerifyCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendPhoneVerifyCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendPhoneVerifyCodeReqValidationError) ErrorName() string {
	return "SendPhoneVerifyCodeReqValidationError"
}

// Error satisfies the builtin error interface
func (e SendPhoneVerifyCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendPhoneVerifyCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendPhoneVerifyCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendPhoneVerifyCodeReqValidationError{}

var _SendPhoneVerifyCodeReq_Phone_Pattern = regexp.MustCompile("^1[1-9]\\d{9}$")

// Validate checks the field values on SendVerifyCodeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendVerifyCodeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendVerifyCodeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendVerifyCodeRespMultiError, or nil if none found.
func (m *SendVerifyCodeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SendVerifyCodeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendVerifyCodeRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendVerifyCodeRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendVerifyCodeRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendVerifyCodeRespMultiError(errors)
	}

	return nil
}

// SendVerifyCodeRespMultiError is an error wrapping multiple validation errors
// returned by SendVerifyCodeResp.ValidateAll() if the designated constraints
// aren't met.
type SendVerifyCodeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendVerifyCodeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendVerifyCodeRespMultiError) AllErrors() []error { return m }

// SendVerifyCodeRespValidationError is the validation error returned by
// SendVerifyCodeResp.Validate if the designated constraints aren't met.
type SendVerifyCodeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendVerifyCodeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendVerifyCodeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendVerifyCodeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendVerifyCodeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendVerifyCodeRespValidationError) ErrorName() string {
	return "SendVerifyCodeRespValidationError"
}

// Error satisfies the builtin error interface
func (e SendVerifyCodeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendVerifyCodeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendVerifyCodeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendVerifyCodeRespValidationError{}

// Validate checks the field values on SendVerifyCodeRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendVerifyCodeRespData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendVerifyCodeRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendVerifyCodeRespDataMultiError, or nil if none found.
func (m *SendVerifyCodeRespData) ValidateAll() error {
	return m.validate(true)
}

func (m *SendVerifyCodeRespData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return SendVerifyCodeRespDataMultiError(errors)
	}

	return nil
}

// SendVerifyCodeRespDataMultiError is an error wrapping multiple validation
// errors returned by SendVerifyCodeRespData.ValidateAll() if the designated
// constraints aren't met.
type SendVerifyCodeRespDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendVerifyCodeRespDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendVerifyCodeRespDataMultiError) AllErrors() []error { return m }

// SendVerifyCodeRespDataValidationError is the validation error returned by
// SendVerifyCodeRespData.Validate if the designated constraints aren't met.
type SendVerifyCodeRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendVerifyCodeRespDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendVerifyCodeRespDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendVerifyCodeRespDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendVerifyCodeRespDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendVerifyCodeRespDataValidationError) ErrorName() string {
	return "SendVerifyCodeRespDataValidationError"
}

// Error satisfies the builtin error interface
func (e SendVerifyCodeRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendVerifyCodeRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendVerifyCodeRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendVerifyCodeRespDataValidationError{}

// Validate checks the field values on SignupByPhoneReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SignupByPhoneReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignupByPhoneReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SignupByPhoneReqMultiError, or nil if none found.
func (m *SignupByPhoneReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SignupByPhoneReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_SignupByPhoneReq_Phone_Pattern.MatchString(m.GetPhone()) {
		err := SignupByPhoneReqValidationError{
			field:  "Phone",
			reason: "value does not match regex pattern \"^1[1-9]\\\\d{9}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_SignupByPhoneReq_Password_Pattern.MatchString(m.GetPassword()) {
		err := SignupByPhoneReqValidationError{
			field:  "Password",
			reason: "value does not match regex pattern \"^.{6,}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_SignupByPhoneReq_PasswordConfirm_Pattern.MatchString(m.GetPasswordConfirm()) {
		err := SignupByPhoneReqValidationError{
			field:  "PasswordConfirm",
			reason: "value does not match regex pattern \"^.{6,}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCode()) > 1024 {
		err := SignupByPhoneReqValidationError{
			field:  "Code",
			reason: "value length must be at most 1024 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SignupByPhoneReqMultiError(errors)
	}

	return nil
}

// SignupByPhoneReqMultiError is an error wrapping multiple validation errors
// returned by SignupByPhoneReq.ValidateAll() if the designated constraints
// aren't met.
type SignupByPhoneReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignupByPhoneReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignupByPhoneReqMultiError) AllErrors() []error { return m }

// SignupByPhoneReqValidationError is the validation error returned by
// SignupByPhoneReq.Validate if the designated constraints aren't met.
type SignupByPhoneReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignupByPhoneReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignupByPhoneReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignupByPhoneReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignupByPhoneReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignupByPhoneReqValidationError) ErrorName() string { return "SignupByPhoneReqValidationError" }

// Error satisfies the builtin error interface
func (e SignupByPhoneReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignupByPhoneReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignupByPhoneReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignupByPhoneReqValidationError{}

var _SignupByPhoneReq_Phone_Pattern = regexp.MustCompile("^1[1-9]\\d{9}$")

var _SignupByPhoneReq_Password_Pattern = regexp.MustCompile("^.{6,}$")

var _SignupByPhoneReq_PasswordConfirm_Pattern = regexp.MustCompile("^.{6,}$")

// Validate checks the field values on SignupByEmailReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SignupByEmailReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignupByEmailReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SignupByEmailReqMultiError, or nil if none found.
func (m *SignupByEmailReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SignupByEmailReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = SignupByEmailReqValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_SignupByEmailReq_Password_Pattern.MatchString(m.GetPassword()) {
		err := SignupByEmailReqValidationError{
			field:  "Password",
			reason: "value does not match regex pattern \"^.{6,}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_SignupByEmailReq_PasswordConfirm_Pattern.MatchString(m.GetPasswordConfirm()) {
		err := SignupByEmailReqValidationError{
			field:  "PasswordConfirm",
			reason: "value does not match regex pattern \"^.{6,}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCode()) > 1024 {
		err := SignupByEmailReqValidationError{
			field:  "Code",
			reason: "value length must be at most 1024 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SignupByEmailReqMultiError(errors)
	}

	return nil
}

func (m *SignupByEmailReq) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *SignupByEmailReq) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// SignupByEmailReqMultiError is an error wrapping multiple validation errors
// returned by SignupByEmailReq.ValidateAll() if the designated constraints
// aren't met.
type SignupByEmailReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignupByEmailReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignupByEmailReqMultiError) AllErrors() []error { return m }

// SignupByEmailReqValidationError is the validation error returned by
// SignupByEmailReq.Validate if the designated constraints aren't met.
type SignupByEmailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignupByEmailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignupByEmailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignupByEmailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignupByEmailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignupByEmailReqValidationError) ErrorName() string { return "SignupByEmailReqValidationError" }

// Error satisfies the builtin error interface
func (e SignupByEmailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignupByEmailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignupByEmailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignupByEmailReqValidationError{}

var _SignupByEmailReq_Password_Pattern = regexp.MustCompile("^.{6,}$")

var _SignupByEmailReq_PasswordConfirm_Pattern = regexp.MustCompile("^.{6,}$")

// Validate checks the field values on LoginByPhoneReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginByPhoneReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByPhoneReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByPhoneReqMultiError, or nil if none found.
func (m *LoginByPhoneReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByPhoneReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_LoginByPhoneReq_Phone_Pattern.MatchString(m.GetPhone()) {
		err := LoginByPhoneReqValidationError{
			field:  "Phone",
			reason: "value does not match regex pattern \"^1[1-9]\\\\d{9}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_LoginByPhoneReq_Password_Pattern.MatchString(m.GetPassword()) {
		err := LoginByPhoneReqValidationError{
			field:  "Password",
			reason: "value does not match regex pattern \"^.{6,}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCode()) > 1024 {
		err := LoginByPhoneReqValidationError{
			field:  "Code",
			reason: "value length must be at most 1024 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginByPhoneReqMultiError(errors)
	}

	return nil
}

// LoginByPhoneReqMultiError is an error wrapping multiple validation errors
// returned by LoginByPhoneReq.ValidateAll() if the designated constraints
// aren't met.
type LoginByPhoneReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByPhoneReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByPhoneReqMultiError) AllErrors() []error { return m }

// LoginByPhoneReqValidationError is the validation error returned by
// LoginByPhoneReq.Validate if the designated constraints aren't met.
type LoginByPhoneReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByPhoneReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByPhoneReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByPhoneReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByPhoneReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByPhoneReqValidationError) ErrorName() string { return "LoginByPhoneReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginByPhoneReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByPhoneReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByPhoneReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByPhoneReqValidationError{}

var _LoginByPhoneReq_Phone_Pattern = regexp.MustCompile("^1[1-9]\\d{9}$")

var _LoginByPhoneReq_Password_Pattern = regexp.MustCompile("^.{6,}$")

// Validate checks the field values on LoginByEmailReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginByEmailReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByEmailReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByEmailReqMultiError, or nil if none found.
func (m *LoginByEmailReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByEmailReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = LoginByEmailReqValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_LoginByEmailReq_Password_Pattern.MatchString(m.GetPassword()) {
		err := LoginByEmailReqValidationError{
			field:  "Password",
			reason: "value does not match regex pattern \"^.{6,}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCode()) > 1024 {
		err := LoginByEmailReqValidationError{
			field:  "Code",
			reason: "value length must be at most 1024 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginByEmailReqMultiError(errors)
	}

	return nil
}

func (m *LoginByEmailReq) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *LoginByEmailReq) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// LoginByEmailReqMultiError is an error wrapping multiple validation errors
// returned by LoginByEmailReq.ValidateAll() if the designated constraints
// aren't met.
type LoginByEmailReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByEmailReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByEmailReqMultiError) AllErrors() []error { return m }

// LoginByEmailReqValidationError is the validation error returned by
// LoginByEmailReq.Validate if the designated constraints aren't met.
type LoginByEmailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByEmailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByEmailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByEmailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByEmailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByEmailReqValidationError) ErrorName() string { return "LoginByEmailReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginByEmailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByEmailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByEmailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByEmailReqValidationError{}

var _LoginByEmailReq_Password_Pattern = regexp.MustCompile("^.{6,}$")

// Validate checks the field values on LoginByOpenApiReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginByOpenApiReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByOpenApiReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByOpenApiReqMultiError, or nil if none found.
func (m *LoginByOpenApiReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByOpenApiReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_LoginByOpenApiReq_AccessId_Pattern.MatchString(m.GetAccessId()) {
		err := LoginByOpenApiReqValidationError{
			field:  "AccessId",
			reason: "value does not match regex pattern \"^.{1,255}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_LoginByOpenApiReq_AccessSecret_Pattern.MatchString(m.GetAccessSecret()) {
		err := LoginByOpenApiReqValidationError{
			field:  "AccessSecret",
			reason: "value does not match regex pattern \"^.{1,255}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginByOpenApiReqMultiError(errors)
	}

	return nil
}

// LoginByOpenApiReqMultiError is an error wrapping multiple validation errors
// returned by LoginByOpenApiReq.ValidateAll() if the designated constraints
// aren't met.
type LoginByOpenApiReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByOpenApiReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByOpenApiReqMultiError) AllErrors() []error { return m }

// LoginByOpenApiReqValidationError is the validation error returned by
// LoginByOpenApiReq.Validate if the designated constraints aren't met.
type LoginByOpenApiReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByOpenApiReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByOpenApiReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByOpenApiReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByOpenApiReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByOpenApiReqValidationError) ErrorName() string {
	return "LoginByOpenApiReqValidationError"
}

// Error satisfies the builtin error interface
func (e LoginByOpenApiReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByOpenApiReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByOpenApiReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByOpenApiReqValidationError{}

var _LoginByOpenApiReq_AccessId_Pattern = regexp.MustCompile("^.{1,255}$")

var _LoginByOpenApiReq_AccessSecret_Pattern = regexp.MustCompile("^.{1,255}$")

// Validate checks the field values on LoginResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRespMultiError, or nil
// if none found.
func (m *LoginResp) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoginRespMultiError(errors)
	}

	return nil
}

// LoginRespMultiError is an error wrapping multiple validation errors returned
// by LoginResp.ValidateAll() if the designated constraints aren't met.
type LoginRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRespMultiError) AllErrors() []error { return m }

// LoginRespValidationError is the validation error returned by
// LoginResp.Validate if the designated constraints aren't met.
type LoginRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRespValidationError) ErrorName() string { return "LoginRespValidationError" }

// Error satisfies the builtin error interface
func (e LoginRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRespValidationError{}

// Validate checks the field values on LoginRespData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRespData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRespData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRespDataMultiError, or
// nil if none found.
func (m *LoginRespData) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRespData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginRespDataValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginRespDataValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginRespDataValidationError{
				field:  "UserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AccessToken

	// no validation rules for AccessTokenExpiredAt

	// no validation rules for RefreshToken

	// no validation rules for RefreshTokenExpiredAt

	if len(errors) > 0 {
		return LoginRespDataMultiError(errors)
	}

	return nil
}

// LoginRespDataMultiError is an error wrapping multiple validation errors
// returned by LoginRespData.ValidateAll() if the designated constraints
// aren't met.
type LoginRespDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRespDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRespDataMultiError) AllErrors() []error { return m }

// LoginRespDataValidationError is the validation error returned by
// LoginRespData.Validate if the designated constraints aren't met.
type LoginRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRespDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRespDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRespDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRespDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRespDataValidationError) ErrorName() string { return "LoginRespDataValidationError" }

// Error satisfies the builtin error interface
func (e LoginRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRespDataValidationError{}

// Validate checks the field values on RefreshTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenReqMultiError, or nil if none found.
func (m *RefreshTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetRefreshToken()); l < 1 || l > 1024 {
		err := RefreshTokenReqValidationError{
			field:  "RefreshToken",
			reason: "value length must be between 1 and 1024 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RefreshTokenReqMultiError(errors)
	}

	return nil
}

// RefreshTokenReqMultiError is an error wrapping multiple validation errors
// returned by RefreshTokenReq.ValidateAll() if the designated constraints
// aren't met.
type RefreshTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenReqMultiError) AllErrors() []error { return m }

// RefreshTokenReqValidationError is the validation error returned by
// RefreshTokenReq.Validate if the designated constraints aren't met.
type RefreshTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenReqValidationError) ErrorName() string { return "RefreshTokenReqValidationError" }

// Error satisfies the builtin error interface
func (e RefreshTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenReqValidationError{}

// Validate checks the field values on ChangePasswordReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChangePasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePasswordReqMultiError, or nil if none found.
func (m *ChangePasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ChangePasswordReq_OldPassword_Pattern.MatchString(m.GetOldPassword()) {
		err := ChangePasswordReqValidationError{
			field:  "OldPassword",
			reason: "value does not match regex pattern \"^.{6,}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ChangePasswordReq_NewPassword_Pattern.MatchString(m.GetNewPassword()) {
		err := ChangePasswordReqValidationError{
			field:  "NewPassword",
			reason: "value does not match regex pattern \"^.{6,}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ChangePasswordReq_NewPasswordConfirm_Pattern.MatchString(m.GetNewPasswordConfirm()) {
		err := ChangePasswordReqValidationError{
			field:  "NewPasswordConfirm",
			reason: "value does not match regex pattern \"^.{6,}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChangePasswordReqMultiError(errors)
	}

	return nil
}

// ChangePasswordReqMultiError is an error wrapping multiple validation errors
// returned by ChangePasswordReq.ValidateAll() if the designated constraints
// aren't met.
type ChangePasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePasswordReqMultiError) AllErrors() []error { return m }

// ChangePasswordReqValidationError is the validation error returned by
// ChangePasswordReq.Validate if the designated constraints aren't met.
type ChangePasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePasswordReqValidationError) ErrorName() string {
	return "ChangePasswordReqValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePasswordReqValidationError{}

var _ChangePasswordReq_OldPassword_Pattern = regexp.MustCompile("^.{6,}$")

var _ChangePasswordReq_NewPassword_Pattern = regexp.MustCompile("^.{6,}$")

var _ChangePasswordReq_NewPasswordConfirm_Pattern = regexp.MustCompile("^.{6,}$")

// Validate checks the field values on ChangePasswordResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangePasswordResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePasswordResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePasswordRespMultiError, or nil if none found.
func (m *ChangePasswordResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePasswordResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangePasswordRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangePasswordRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangePasswordRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangePasswordRespMultiError(errors)
	}

	return nil
}

// ChangePasswordRespMultiError is an error wrapping multiple validation errors
// returned by ChangePasswordResp.ValidateAll() if the designated constraints
// aren't met.
type ChangePasswordRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePasswordRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePasswordRespMultiError) AllErrors() []error { return m }

// ChangePasswordRespValidationError is the validation error returned by
// ChangePasswordResp.Validate if the designated constraints aren't met.
type ChangePasswordRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePasswordRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePasswordRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePasswordRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePasswordRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePasswordRespValidationError) ErrorName() string {
	return "ChangePasswordRespValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePasswordRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePasswordResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePasswordRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePasswordRespValidationError{}

// Validate checks the field values on ChangePasswordRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangePasswordRespData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePasswordRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePasswordRespDataMultiError, or nil if none found.
func (m *ChangePasswordRespData) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePasswordRespData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangePasswordRespDataMultiError(errors)
	}

	return nil
}

// ChangePasswordRespDataMultiError is an error wrapping multiple validation
// errors returned by ChangePasswordRespData.ValidateAll() if the designated
// constraints aren't met.
type ChangePasswordRespDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePasswordRespDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePasswordRespDataMultiError) AllErrors() []error { return m }

// ChangePasswordRespDataValidationError is the validation error returned by
// ChangePasswordRespData.Validate if the designated constraints aren't met.
type ChangePasswordRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePasswordRespDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePasswordRespDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePasswordRespDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePasswordRespDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePasswordRespDataValidationError) ErrorName() string {
	return "ChangePasswordRespDataValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePasswordRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePasswordRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePasswordRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePasswordRespDataValidationError{}

// Validate checks the field values on ChangeAvatarReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChangeAvatarReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeAvatarReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeAvatarReqMultiError, or nil if none found.
func (m *ChangeAvatarReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeAvatarReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUserAvatar()); l < 1 || l > 1024 {
		err := ChangeAvatarReqValidationError{
			field:  "UserAvatar",
			reason: "value length must be between 1 and 1024 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChangeAvatarReqMultiError(errors)
	}

	return nil
}

// ChangeAvatarReqMultiError is an error wrapping multiple validation errors
// returned by ChangeAvatarReq.ValidateAll() if the designated constraints
// aren't met.
type ChangeAvatarReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeAvatarReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeAvatarReqMultiError) AllErrors() []error { return m }

// ChangeAvatarReqValidationError is the validation error returned by
// ChangeAvatarReq.Validate if the designated constraints aren't met.
type ChangeAvatarReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeAvatarReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeAvatarReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeAvatarReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeAvatarReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeAvatarReqValidationError) ErrorName() string { return "ChangeAvatarReqValidationError" }

// Error satisfies the builtin error interface
func (e ChangeAvatarReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeAvatarReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeAvatarReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeAvatarReqValidationError{}

// Validate checks the field values on ChangeAvatarResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChangeAvatarResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeAvatarResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeAvatarRespMultiError, or nil if none found.
func (m *ChangeAvatarResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeAvatarResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeAvatarRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeAvatarRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeAvatarRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeAvatarRespMultiError(errors)
	}

	return nil
}

// ChangeAvatarRespMultiError is an error wrapping multiple validation errors
// returned by ChangeAvatarResp.ValidateAll() if the designated constraints
// aren't met.
type ChangeAvatarRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeAvatarRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeAvatarRespMultiError) AllErrors() []error { return m }

// ChangeAvatarRespValidationError is the validation error returned by
// ChangeAvatarResp.Validate if the designated constraints aren't met.
type ChangeAvatarRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeAvatarRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeAvatarRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeAvatarRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeAvatarRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeAvatarRespValidationError) ErrorName() string { return "ChangeAvatarRespValidationError" }

// Error satisfies the builtin error interface
func (e ChangeAvatarRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeAvatarResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeAvatarRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeAvatarRespValidationError{}

// Validate checks the field values on ChangeAvatarRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeAvatarRespData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeAvatarRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeAvatarRespDataMultiError, or nil if none found.
func (m *ChangeAvatarRespData) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeAvatarRespData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeAvatarRespDataMultiError(errors)
	}

	return nil
}

// ChangeAvatarRespDataMultiError is an error wrapping multiple validation
// errors returned by ChangeAvatarRespData.ValidateAll() if the designated
// constraints aren't met.
type ChangeAvatarRespDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeAvatarRespDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeAvatarRespDataMultiError) AllErrors() []error { return m }

// ChangeAvatarRespDataValidationError is the validation error returned by
// ChangeAvatarRespData.Validate if the designated constraints aren't met.
type ChangeAvatarRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeAvatarRespDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeAvatarRespDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeAvatarRespDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeAvatarRespDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeAvatarRespDataValidationError) ErrorName() string {
	return "ChangeAvatarRespDataValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeAvatarRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeAvatarRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeAvatarRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeAvatarRespDataValidationError{}

// Validate checks the field values on ChangePhoneReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChangePhoneReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePhoneReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChangePhoneReqMultiError,
// or nil if none found.
func (m *ChangePhoneReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePhoneReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ChangePhoneReq_Phone_Pattern.MatchString(m.GetPhone()) {
		err := ChangePhoneReqValidationError{
			field:  "Phone",
			reason: "value does not match regex pattern \"^1[1-9]\\\\d{9}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCode()) > 1024 {
		err := ChangePhoneReqValidationError{
			field:  "Code",
			reason: "value length must be at most 1024 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChangePhoneReqMultiError(errors)
	}

	return nil
}

// ChangePhoneReqMultiError is an error wrapping multiple validation errors
// returned by ChangePhoneReq.ValidateAll() if the designated constraints
// aren't met.
type ChangePhoneReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePhoneReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePhoneReqMultiError) AllErrors() []error { return m }

// ChangePhoneReqValidationError is the validation error returned by
// ChangePhoneReq.Validate if the designated constraints aren't met.
type ChangePhoneReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePhoneReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePhoneReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePhoneReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePhoneReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePhoneReqValidationError) ErrorName() string { return "ChangePhoneReqValidationError" }

// Error satisfies the builtin error interface
func (e ChangePhoneReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePhoneReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePhoneReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePhoneReqValidationError{}

var _ChangePhoneReq_Phone_Pattern = regexp.MustCompile("^1[1-9]\\d{9}$")

// Validate checks the field values on ChangePhoneResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChangePhoneResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePhoneResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePhoneRespMultiError, or nil if none found.
func (m *ChangePhoneResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePhoneResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangePhoneRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangePhoneRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangePhoneRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangePhoneRespMultiError(errors)
	}

	return nil
}

// ChangePhoneRespMultiError is an error wrapping multiple validation errors
// returned by ChangePhoneResp.ValidateAll() if the designated constraints
// aren't met.
type ChangePhoneRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePhoneRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePhoneRespMultiError) AllErrors() []error { return m }

// ChangePhoneRespValidationError is the validation error returned by
// ChangePhoneResp.Validate if the designated constraints aren't met.
type ChangePhoneRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePhoneRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePhoneRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePhoneRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePhoneRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePhoneRespValidationError) ErrorName() string { return "ChangePhoneRespValidationError" }

// Error satisfies the builtin error interface
func (e ChangePhoneRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePhoneResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePhoneRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePhoneRespValidationError{}

// Validate checks the field values on ChangePhoneRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangePhoneRespData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePhoneRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePhoneRespDataMultiError, or nil if none found.
func (m *ChangePhoneRespData) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePhoneRespData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangePhoneRespDataMultiError(errors)
	}

	return nil
}

// ChangePhoneRespDataMultiError is an error wrapping multiple validation
// errors returned by ChangePhoneRespData.ValidateAll() if the designated
// constraints aren't met.
type ChangePhoneRespDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePhoneRespDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePhoneRespDataMultiError) AllErrors() []error { return m }

// ChangePhoneRespDataValidationError is the validation error returned by
// ChangePhoneRespData.Validate if the designated constraints aren't met.
type ChangePhoneRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePhoneRespDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePhoneRespDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePhoneRespDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePhoneRespDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePhoneRespDataValidationError) ErrorName() string {
	return "ChangePhoneRespDataValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePhoneRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePhoneRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePhoneRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePhoneRespDataValidationError{}

// Validate checks the field values on ChangeEmailReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChangeEmailReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeEmailReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChangeEmailReqMultiError,
// or nil if none found.
func (m *ChangeEmailReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeEmailReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetUserEmail()); err != nil {
		err = ChangeEmailReqValidationError{
			field:  "UserEmail",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCode()) > 1024 {
		err := ChangeEmailReqValidationError{
			field:  "Code",
			reason: "value length must be at most 1024 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChangeEmailReqMultiError(errors)
	}

	return nil
}

func (m *ChangeEmailReq) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *ChangeEmailReq) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// ChangeEmailReqMultiError is an error wrapping multiple validation errors
// returned by ChangeEmailReq.ValidateAll() if the designated constraints
// aren't met.
type ChangeEmailReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeEmailReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeEmailReqMultiError) AllErrors() []error { return m }

// ChangeEmailReqValidationError is the validation error returned by
// ChangeEmailReq.Validate if the designated constraints aren't met.
type ChangeEmailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeEmailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeEmailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeEmailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeEmailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeEmailReqValidationError) ErrorName() string { return "ChangeEmailReqValidationError" }

// Error satisfies the builtin error interface
func (e ChangeEmailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeEmailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeEmailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeEmailReqValidationError{}

// Validate checks the field values on ChangeEmailResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChangeEmailResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeEmailResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeEmailRespMultiError, or nil if none found.
func (m *ChangeEmailResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeEmailResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeEmailRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeEmailRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeEmailRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeEmailRespMultiError(errors)
	}

	return nil
}

// ChangeEmailRespMultiError is an error wrapping multiple validation errors
// returned by ChangeEmailResp.ValidateAll() if the designated constraints
// aren't met.
type ChangeEmailRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeEmailRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeEmailRespMultiError) AllErrors() []error { return m }

// ChangeEmailRespValidationError is the validation error returned by
// ChangeEmailResp.Validate if the designated constraints aren't met.
type ChangeEmailRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeEmailRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeEmailRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeEmailRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeEmailRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeEmailRespValidationError) ErrorName() string { return "ChangeEmailRespValidationError" }

// Error satisfies the builtin error interface
func (e ChangeEmailRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeEmailResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeEmailRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeEmailRespValidationError{}

// Validate checks the field values on ChangeEmailRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeEmailRespData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeEmailRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeEmailRespDataMultiError, or nil if none found.
func (m *ChangeEmailRespData) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeEmailRespData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeEmailRespDataMultiError(errors)
	}

	return nil
}

// ChangeEmailRespDataMultiError is an error wrapping multiple validation
// errors returned by ChangeEmailRespData.ValidateAll() if the designated
// constraints aren't met.
type ChangeEmailRespDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeEmailRespDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeEmailRespDataMultiError) AllErrors() []error { return m }

// ChangeEmailRespDataValidationError is the validation error returned by
// ChangeEmailRespData.Validate if the designated constraints aren't met.
type ChangeEmailRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeEmailRespDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeEmailRespDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeEmailRespDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeEmailRespDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeEmailRespDataValidationError) ErrorName() string {
	return "ChangeEmailRespDataValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeEmailRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeEmailRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeEmailRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeEmailRespDataValidationError{}

// Validate checks the field values on ChangeNicknameReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChangeNicknameReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeNicknameReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeNicknameReqMultiError, or nil if none found.
func (m *ChangeNicknameReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeNicknameReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUserNickname()); l < 1 || l > 1024 {
		err := ChangeNicknameReqValidationError{
			field:  "UserNickname",
			reason: "value length must be between 1 and 1024 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChangeNicknameReqMultiError(errors)
	}

	return nil
}

// ChangeNicknameReqMultiError is an error wrapping multiple validation errors
// returned by ChangeNicknameReq.ValidateAll() if the designated constraints
// aren't met.
type ChangeNicknameReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeNicknameReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeNicknameReqMultiError) AllErrors() []error { return m }

// ChangeNicknameReqValidationError is the validation error returned by
// ChangeNicknameReq.Validate if the designated constraints aren't met.
type ChangeNicknameReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeNicknameReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeNicknameReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeNicknameReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeNicknameReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeNicknameReqValidationError) ErrorName() string {
	return "ChangeNicknameReqValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeNicknameReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeNicknameReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeNicknameReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeNicknameReqValidationError{}

// Validate checks the field values on ChangeNicknameResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeNicknameResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeNicknameResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeNicknameRespMultiError, or nil if none found.
func (m *ChangeNicknameResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeNicknameResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeNicknameRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeNicknameRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeNicknameRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeNicknameRespMultiError(errors)
	}

	return nil
}

// ChangeNicknameRespMultiError is an error wrapping multiple validation errors
// returned by ChangeNicknameResp.ValidateAll() if the designated constraints
// aren't met.
type ChangeNicknameRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeNicknameRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeNicknameRespMultiError) AllErrors() []error { return m }

// ChangeNicknameRespValidationError is the validation error returned by
// ChangeNicknameResp.Validate if the designated constraints aren't met.
type ChangeNicknameRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeNicknameRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeNicknameRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeNicknameRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeNicknameRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeNicknameRespValidationError) ErrorName() string {
	return "ChangeNicknameRespValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeNicknameRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeNicknameResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeNicknameRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeNicknameRespValidationError{}

// Validate checks the field values on ChangeNicknameRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeNicknameRespData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeNicknameRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeNicknameRespDataMultiError, or nil if none found.
func (m *ChangeNicknameRespData) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeNicknameRespData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeNicknameRespDataMultiError(errors)
	}

	return nil
}

// ChangeNicknameRespDataMultiError is an error wrapping multiple validation
// errors returned by ChangeNicknameRespData.ValidateAll() if the designated
// constraints aren't met.
type ChangeNicknameRespDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeNicknameRespDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeNicknameRespDataMultiError) AllErrors() []error { return m }

// ChangeNicknameRespDataValidationError is the validation error returned by
// ChangeNicknameRespData.Validate if the designated constraints aren't met.
type ChangeNicknameRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeNicknameRespDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeNicknameRespDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeNicknameRespDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeNicknameRespDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeNicknameRespDataValidationError) ErrorName() string {
	return "ChangeNicknameRespDataValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeNicknameRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeNicknameRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeNicknameRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeNicknameRespDataValidationError{}

// Validate checks the field values on ChangeGenderReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChangeGenderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeGenderReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeGenderReqMultiError, or nil if none found.
func (m *ChangeGenderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeGenderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _ChangeGenderReq_UserGender_NotInLookup[m.GetUserGender()]; ok {
		err := ChangeGenderReqValidationError{
			field:  "UserGender",
			reason: "value must not be in list [UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChangeGenderReqMultiError(errors)
	}

	return nil
}

// ChangeGenderReqMultiError is an error wrapping multiple validation errors
// returned by ChangeGenderReq.ValidateAll() if the designated constraints
// aren't met.
type ChangeGenderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeGenderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeGenderReqMultiError) AllErrors() []error { return m }

// ChangeGenderReqValidationError is the validation error returned by
// ChangeGenderReq.Validate if the designated constraints aren't met.
type ChangeGenderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeGenderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeGenderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeGenderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeGenderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeGenderReqValidationError) ErrorName() string { return "ChangeGenderReqValidationError" }

// Error satisfies the builtin error interface
func (e ChangeGenderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeGenderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeGenderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeGenderReqValidationError{}

var _ChangeGenderReq_UserGender_NotInLookup = map[enumv1.UserGenderEnum_UserGender]struct{}{
	0: {},
}

// Validate checks the field values on ChangeGenderResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChangeGenderResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeGenderResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeGenderRespMultiError, or nil if none found.
func (m *ChangeGenderResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeGenderResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeGenderRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeGenderRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeGenderRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeGenderRespMultiError(errors)
	}

	return nil
}

// ChangeGenderRespMultiError is an error wrapping multiple validation errors
// returned by ChangeGenderResp.ValidateAll() if the designated constraints
// aren't met.
type ChangeGenderRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeGenderRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeGenderRespMultiError) AllErrors() []error { return m }

// ChangeGenderRespValidationError is the validation error returned by
// ChangeGenderResp.Validate if the designated constraints aren't met.
type ChangeGenderRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeGenderRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeGenderRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeGenderRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeGenderRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeGenderRespValidationError) ErrorName() string { return "ChangeGenderRespValidationError" }

// Error satisfies the builtin error interface
func (e ChangeGenderRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeGenderResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeGenderRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeGenderRespValidationError{}

// Validate checks the field values on ChangeGenderRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeGenderRespData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeGenderRespData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeGenderRespDataMultiError, or nil if none found.
func (m *ChangeGenderRespData) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeGenderRespData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeGenderRespDataMultiError(errors)
	}

	return nil
}

// ChangeGenderRespDataMultiError is an error wrapping multiple validation
// errors returned by ChangeGenderRespData.ValidateAll() if the designated
// constraints aren't met.
type ChangeGenderRespDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeGenderRespDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeGenderRespDataMultiError) AllErrors() []error { return m }

// ChangeGenderRespDataValidationError is the validation error returned by
// ChangeGenderRespData.Validate if the designated constraints aren't met.
type ChangeGenderRespDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeGenderRespDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeGenderRespDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeGenderRespDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeGenderRespDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeGenderRespDataValidationError) ErrorName() string {
	return "ChangeGenderRespDataValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeGenderRespDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeGenderRespData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeGenderRespDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeGenderRespDataValidationError{}
