// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.6
// source: api/uuid-service/v1/services/uuid.service.v1.proto

package servicev1

import (
	context "context"
	resources "github.com/go-micro-saas/service-api/api/uuid-service/v1/resources"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SrvUuidV1_NextID_FullMethodName = "/saas.api.uuid.servicev1.SrvUuidV1/NextID"
)

// SrvUuidV1Client is the client API for SrvUuidV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SrvUuidV1Client interface {
	// 获取ID
	NextID(ctx context.Context, in *resources.NextIDReq, opts ...grpc.CallOption) (*resources.NextIDResp, error)
}

type srvUuidV1Client struct {
	cc grpc.ClientConnInterface
}

func NewSrvUuidV1Client(cc grpc.ClientConnInterface) SrvUuidV1Client {
	return &srvUuidV1Client{cc}
}

func (c *srvUuidV1Client) NextID(ctx context.Context, in *resources.NextIDReq, opts ...grpc.CallOption) (*resources.NextIDResp, error) {
	out := new(resources.NextIDResp)
	err := c.cc.Invoke(ctx, SrvUuidV1_NextID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SrvUuidV1Server is the server API for SrvUuidV1 service.
// All implementations must embed UnimplementedSrvUuidV1Server
// for forward compatibility
type SrvUuidV1Server interface {
	// 获取ID
	NextID(context.Context, *resources.NextIDReq) (*resources.NextIDResp, error)
	mustEmbedUnimplementedSrvUuidV1Server()
}

// UnimplementedSrvUuidV1Server must be embedded to have forward compatible implementations.
type UnimplementedSrvUuidV1Server struct {
}

func (UnimplementedSrvUuidV1Server) NextID(context.Context, *resources.NextIDReq) (*resources.NextIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextID not implemented")
}
func (UnimplementedSrvUuidV1Server) mustEmbedUnimplementedSrvUuidV1Server() {}

// UnsafeSrvUuidV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SrvUuidV1Server will
// result in compilation errors.
type UnsafeSrvUuidV1Server interface {
	mustEmbedUnimplementedSrvUuidV1Server()
}

func RegisterSrvUuidV1Server(s grpc.ServiceRegistrar, srv SrvUuidV1Server) {
	s.RegisterService(&SrvUuidV1_ServiceDesc, srv)
}

func _SrvUuidV1_NextID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.NextIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvUuidV1Server).NextID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SrvUuidV1_NextID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvUuidV1Server).NextID(ctx, req.(*resources.NextIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SrvUuidV1_ServiceDesc is the grpc.ServiceDesc for SrvUuidV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SrvUuidV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "saas.api.uuid.servicev1.SrvUuidV1",
	HandlerType: (*SrvUuidV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NextID",
			Handler:    _SrvUuidV1_NextID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/uuid-service/v1/services/uuid.service.v1.proto",
}
