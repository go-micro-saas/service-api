// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package errorv1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
	strconv "strconv"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 未知错误
func IsUnknown(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_UNKNOWN.String() && e.Code == 500
}

// 未知错误
func ErrorUnknown(format string, args ...interface{}) *errors.Error {
	e := errors.New(500, ERROR_UNKNOWN.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_UNKNOWN.Number()))}
	return e
}

// 没有可用的节点ID
func IsS102NoAvailableId(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S102_NO_AVAILABLE_ID.String() && e.Code == 400
}

// 没有可用的节点ID
func ErrorS102NoAvailableId(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S102_NO_AVAILABLE_ID.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S102_NO_AVAILABLE_ID.Number()))}
	return e
}

// 节点ID不存在
func IsS102RecordNotFount(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S102_RECORD_NOT_FOUNT.String() && e.Code == 400
}

// 节点ID不存在
func ErrorS102RecordNotFount(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S102_RECORD_NOT_FOUNT.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S102_RECORD_NOT_FOUNT.Number()))}
	return e
}

// 节点ID已被使用
func IsS102RecordAlreadyExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S102_RECORD_ALREADY_EXIST.String() && e.Code == 400
}

// 节点ID已被使用
func ErrorS102RecordAlreadyExist(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S102_RECORD_ALREADY_EXIST.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S102_RECORD_ALREADY_EXIST.Number()))}
	return e
}

// 节点ID已被使用
func IsS102HasBeenUsed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S102_HAS_BEEN_USED.String() && e.Code == 400
}

// 节点ID已被使用
func ErrorS102HasBeenUsed(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S102_HAS_BEEN_USED.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S102_HAS_BEEN_USED.Number()))}
	return e
}

// 节点ID续订失败
func IsS102NodeIdRenewalFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S102_NODE_ID_RENEWAL_FAILED.String() && e.Code == 400
}

// 节点ID续订失败
func ErrorS102NodeIdRenewalFailed(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S102_NODE_ID_RENEWAL_FAILED.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S102_NODE_ID_RENEWAL_FAILED.Number()))}
	return e
}

// 节点ID信息不正确
func IsS102NodeIdIncorrect(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S102_NODE_ID_INCORRECT.String() && e.Code == 400
}

// 节点ID信息不正确
func ErrorS102NodeIdIncorrect(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S102_NODE_ID_INCORRECT.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S102_NODE_ID_INCORRECT.Number()))}
	return e
}

// 访问令牌不正确
func IsS102AccessTokenIncorrect(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S102_ACCESS_TOKEN_INCORRECT.String() && e.Code == 400
}

// 访问令牌不正确
func ErrorS102AccessTokenIncorrect(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S102_ACCESS_TOKEN_INCORRECT.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S102_ACCESS_TOKEN_INCORRECT.Number()))}
	return e
}

// 节点状态不正确
func IsS102NodeIdStatusIncorrect(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S102_NODE_ID_STATUS_INCORRECT.String() && e.Code == 400
}

// 节点状态不正确
func ErrorS102NodeIdStatusIncorrect(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S102_NODE_ID_STATUS_INCORRECT.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S102_NODE_ID_STATUS_INCORRECT.Number()))}
	return e
}
